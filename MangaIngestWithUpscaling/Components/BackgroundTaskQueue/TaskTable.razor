@using MangaIngestWithUpscaling.Data.BackqroundTaskQueue
<MudTable T="PersistedTask" Items="@Tasks" RowsPerPage="10" Elevation="3" Dense="true" @ref="Table">
    <ToolBarContent>
        <MudText Typo="Typo.h6">@Title</MudText>
        <MudSpacer />
        <MudButton StartIcon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Primary"
            OnClick="OnClearFailed">Clear Failed
        </MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.ClearAll" Variant="Variant.Filled" Color="Color.Primary"
            OnClick="OnClearCompleted">Clear Completed
        </MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel InitialDirection="SortDirection.Ascending"
                SortBy="new Func<PersistedTask, object>(x => x.Order)">Order
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<PersistedTask, object>(x => x.Data.TaskFriendlyName)">Name
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<PersistedTask, object>(x => x.CreatedAt)">Queued At</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<PersistedTask, object?>(x => x.ProcessedAt)">Finished At
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<PersistedTask, object>(x => x.Status)">Status</MudTableSortLabel>
        </MudTh>
        <MudTh>Progress</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Order">
            @context.Order
        </MudTd>
        <MudTd DataLabel="Name">@context.Data.TaskFriendlyName</MudTd>
        <MudTd DataLabel="Queued At">@context.CreatedAt.ToLocalTime()</MudTd>
        <MudTd DataLabel="Finished At">@(context.ProcessedAt is not null ? context.ProcessedAt.Value.ToLocalTime() : "")
        </MudTd>
        <MudTd DataLabel="Status">@context.Status</MudTd>
        <MudTd DataLabel="Progress">
            @if (context.Status == PersistedTaskStatus.Processing && context.Data?.Progress is not null)
            {
                var p = context.Data.Progress;
                <span>@(p.IsIndeterminate ? "…" : $"{p.Current}/{p.Total} {p.ProgressUnit}")</span>
                @if (!string.IsNullOrWhiteSpace(p.StatusMessage))
                {
                    <div style="font-size: 0.8em; color: var(--mud-palette-text-secondary);">@p.StatusMessage</div>
                }
            }
        </MudTd>
        <MudTd DataLabel="Actions" Style="white-space: nowrap">
            @if (context.Status == PersistedTaskStatus.Pending)
            {
                <MudIconButton Icon="@Icons.Material.Filled.PlayArrow" Variant="Variant.Text" Size="Size.Small"
                    OnClick="_ => OnRunNow.InvokeAsync(context)" />
            }
            else if (context.Status is PersistedTaskStatus.Failed or PersistedTaskStatus.Canceled)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Refresh" Variant="Variant.Text" Size="Size.Small"
                    OnClick="_ => OnRetryFailed.InvokeAsync(context)" />
            }
            @if (context.Status == PersistedTaskStatus.Processing)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Cancel" Variant="Variant.Text" Color="Color.Error"
                    Size="Size.Small" OnClick="_ => OnCancel.InvokeAsync(context)" />
            }
            else
            {
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Text" Color="Color.Error"
                    Size="Size.Small" OnClick="_ => OnDelete.InvokeAsync(context)" />
            }
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    [Parameter] public IReadOnlyCollection<PersistedTask> Tasks { get; set; } = [];
    [Parameter] public string Title { get; set; } = "Tasks";

    [Parameter] public EventCallback OnClearCompleted { get; set; } = EventCallback.Empty;
    [Parameter] public EventCallback OnClearFailed { get; set; } = EventCallback.Empty;
    [Parameter] public EventCallback<PersistedTask> OnRetryFailed { get; set; } = EventCallback<PersistedTask>.Empty;
    [Parameter] public EventCallback<PersistedTask> OnCancel { get; set; } = EventCallback<PersistedTask>.Empty;
    [Parameter] public EventCallback<PersistedTask> OnRunNow { get; set; } = EventCallback<PersistedTask>.Empty;
    [Parameter] public EventCallback<PersistedTask> OnDelete { get; set; } = EventCallback<PersistedTask>.Empty;

    private MudTable<PersistedTask> Table { get; set; } = null!;

    protected override void OnParametersSet()
    {
        Tasks = new List<PersistedTask>(Tasks);
    }

}
