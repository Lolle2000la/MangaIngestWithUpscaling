@using MangaIngestWithUpscaling.Data.BackqroundTaskQueue
@using MangaIngestWithUpscaling.Services.BackqroundTaskQueue
@using MangaIngestWithUpscaling.Services.BackqroundTaskQueue.Tasks
@using Microsoft.EntityFrameworkCore

@implements IDisposable

@inject ApplicationDbContext DbContext
@inject ILogger<TaskQueues> Logger

@inject TaskQueue TaskQueue
@inject StandardTaskProcessor StandardTaskProcessor
@inject UpscaleTaskProcessor UpscaleTaskProcessor

@page "/tasks"

<h3>Running tasks</h3>

<MudGrid>
    <MudItem lg="6" xs="12">
        <TaskTable Tasks="@standardTasks" />
    </MudItem>
    <MudItem lg="6" xs="12">
        <TaskTable Tasks="@upscaleTasks" />
    </MudItem>
</MudGrid>

@code {
    private List<PersistedTask> standardTasks { get; set; }
    private List<PersistedTask> upscaleTasks { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var allTasks = await DbContext.PersistedTasks.ToListAsync();
        standardTasks = allTasks.Where(x => x.Data is not UpscaleTask).ToList();
        upscaleTasks = allTasks.Where(x => x.Data is UpscaleTask).ToList();

        TaskQueue.TaskEnqueued += OnTaskUpdate;
        StandardTaskProcessor.StatusChanged += OnStandardTaskChanged;
        UpscaleTaskProcessor.StatusChanged += OnUpscaleTaskChanged;
    }

    public void Dispose()
    {
        TaskQueue.TaskEnqueued -= OnTaskUpdate;
        StandardTaskProcessor.StatusChanged -= OnStandardTaskChanged;
        UpscaleTaskProcessor.StatusChanged -= OnUpscaleTaskChanged;
    }

    private async Task OnTaskUpdate(PersistedTask task)
    {
        await InvokeAsync(() =>
        {
            if (task.Data is UpscaleTask)
            {
                upscaleTasks.Add(task);
            }
            else
            {
                standardTasks.Add(task);
            }
            StateHasChanged();
        });
    }

    private async Task OnStandardTaskChanged(PersistedTask task)
    {
        await InvokeAsync(() =>
        {
            standardTasks[standardTasks.FindIndex(t => t.Id == task.Id)] = task;

            StateHasChanged();
        });
    }

    private async Task OnUpscaleTaskChanged(PersistedTask task)
    {
        await InvokeAsync(() =>
        {
            upscaleTasks[upscaleTasks.FindIndex(t => t.Id == task.Id)] = task;

            StateHasChanged();
        });
    }
}
