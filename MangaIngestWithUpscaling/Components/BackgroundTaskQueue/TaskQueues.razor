@using MangaIngestWithUpscaling.Data.BackqroundTaskQueue
@using MangaIngestWithUpscaling.Services.BackqroundTaskQueue
@using MangaIngestWithUpscaling.Services.BackqroundTaskQueue.Tasks
@using MangaIngestWithUpscaling.Services.Helpers
@using Microsoft.EntityFrameworkCore

@implements IDisposable

@inject ApplicationDbContext DbContext
@inject ILogger<TaskQueues> Logger

@inject TaskQueue TaskQueue
@inject StandardTaskProcessor StandardTaskProcessor
@inject UpscaleTaskProcessor UpscaleTaskProcessor

@page "/tasks"

<PageTitle>Tasks</PageTitle>

<MudText Typo="Typo.h4" Class="mb-2">Currently running tasks</MudText>

<MudGrid>
    <MudItem lg="6" xs="12">
        <TaskTable Tasks="@standardTasks" Title="Standard Tasks"
                   OnClearCompleted="OnClearCompletedStandardTasks"
                   OnRetryFailed="OnRetryFailed"
                   OnDelete="OnDelete"
                   OnCancel="OnCancelStandardTask"
                   OnRunNow="OnRunNow" />
    </MudItem>
    <MudItem lg="6" xs="12">
        <TaskTable Tasks="@upscaleTasks" Title="Upscaling Tasks"
                   OnClearCompleted="OnClearCompletedUpscaleTasks"
                   OnRetryFailed="OnRetryFailed"
                   OnDelete="OnDelete"
                   OnCancel="OnCancelUpscaleTask"
                   OnRunNow="OnRunNow" />
    </MudItem>
</MudGrid>

@code {
    private List<PersistedTask> standardTasks { get; set; } = [];
    private List<PersistedTask> upscaleTasks { get; set; } = [];

    private async Task OnClearCompletedStandardTasks()
    {
        var completedTasks = standardTasks.Where(x => x.Status == PersistedTaskStatus.Completed).ToList();
        foreach (var task in completedTasks)
        {
            DbContext.PersistedTasks.Remove(task);
        }
        await DbContext.SaveChangesAsync();
        standardTasks = standardTasks.Where(x => x.Status != PersistedTaskStatus.Completed).ToList();
    }

    private async Task OnClearCompletedUpscaleTasks()
    {
        var completedTasks = upscaleTasks.Where(x => x.Status == PersistedTaskStatus.Completed).ToList();
        foreach (var task in completedTasks)
        {
            DbContext.PersistedTasks.Remove(task);
        }
        await DbContext.SaveChangesAsync();
        upscaleTasks = upscaleTasks.Where(x => x.Status != PersistedTaskStatus.Completed && x.Status != PersistedTaskStatus.Failed).ToList();
    }

    private async Task OnRetryFailed(PersistedTask task)
    {
        await TaskQueue.RetryAsync(task);
    }

    private async Task OnDelete(PersistedTask task)
    {
        await TaskQueue.RemoveTaskAsync(task);
        if (task.Data is UpscaleTask)
        {
            upscaleTasks.Remove(task);
        }
        else
        {
            standardTasks.Remove(task);
        }
    }

    private void OnCancelStandardTask(PersistedTask task)
    {
        StandardTaskProcessor.CancelCurrent(task);
    }

    private void OnCancelUpscaleTask(PersistedTask task)
    {
        UpscaleTaskProcessor.CancelCurrent(task);
    }

    private async Task OnRunNow(PersistedTask task)
    {
        await TaskQueue.ReorderTaskAsync(task, await DbContext.PersistedTasks.MinAsync(x => x.Order) - 1);
    }

    protected override async Task OnInitializedAsync()
    {
        var allTasks = await DbContext.PersistedTasks.ToListAsync();
        standardTasks = allTasks.Where(x => x.Data is not UpscaleTask or RenameUpscaledChaptersSeriesTask).ToList();
        upscaleTasks = allTasks.Where(x => x.Data is UpscaleTask or RenameUpscaledChaptersSeriesTask).ToList();

        TaskQueue.TaskEnqueuedOrChanged += OnTaskUpdate;
        StandardTaskProcessor.StatusChanged += OnStandardTaskChanged;
        UpscaleTaskProcessor.StatusChanged += OnUpscaleTaskChanged;
    }

    public void Dispose()
    {
        TaskQueue.TaskEnqueuedOrChanged -= OnTaskUpdate;
        StandardTaskProcessor.StatusChanged -= OnStandardTaskChanged;
        UpscaleTaskProcessor.StatusChanged -= OnUpscaleTaskChanged;
    }

    private async Task OnTaskUpdate(PersistedTask task)
    {
        await InvokeAsync(() =>
        {
            if (task.Data is UpscaleTask or RenameUpscaledChaptersSeriesTask)
            {
                upscaleTasks.AddOrReplace(task, t => t.Id == task.Id);
            }
            else
            {
                standardTasks.AddOrReplace(task, t => t.Id == task.Id);
            }
            StateHasChanged();
        });
    }

    private async Task OnStandardTaskChanged(PersistedTask task)
    {
        await InvokeAsync(() =>
        {
            standardTasks[standardTasks.FindIndex(t => t.Id == task.Id)] = task;

            StateHasChanged();
        });
    }

    private async Task OnUpscaleTaskChanged(PersistedTask task)
    {
        await InvokeAsync(() =>
        {
            upscaleTasks[upscaleTasks.FindIndex(t => t.Id == task.Id)] = task;

            StateHasChanged();
        });
    }
}
