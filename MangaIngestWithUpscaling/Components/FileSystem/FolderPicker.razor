@inherits ReactiveInjectableComponentBase<FolderPickerViewModel>

@inject FolderPickerViewModel viewModel

<MudPaper Class="pa-4" Elevation="5">
    <MudStack Row="true">
        <MudText Typo="Typo.h6" Class="mb-4">
            @ViewModel?.Title

            @if (Required)
            {
                <MudText Typo="Typo.inherit" Class="ml-1" Color="Color.Error">*</MudText>
            }
        </MudText>
    </MudStack>

    <MudStack Row="true" AlignItems="AlignItems.Baseline">
        <MudText Typo="Typo.subtitle2" Class="mb-2">Current Path: </MudText>
        <MudInputString @bind-Value="ViewModel!.RootDirectory" Class="mb-2 flex-grow-1" FullWidth="true"
                        Disabled="@(ViewModel?.Disabled == true || (ViewModel?.Loading ?? false))" />
    </MudStack>

    @if (ViewModel?.ErrorMessage != null)
    {
        <MudAlert Severity="Severity.Error">@ViewModel.ErrorMessage</MudAlert>
    }

    <MudPaper Elevation="2">
        <MudStack Row="true" AlignItems="AlignItems.Center">
            <MudButton Variant="Variant.Outlined"
                       OnClick="async e => await ViewModel!.GoToParentCommand.Execute()"
                       Disabled="@(ViewModel?.Disabled == true || (ViewModel?.Loading ?? false))">
                Go to Parent
            </MudButton>
            <MudSpacer />
            <MudButton Variant="Variant.Text"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.Refresh"
                       Disabled="@(ViewModel?.Disabled == true || (ViewModel?.Loading ?? false))"
                       OnClick="async e => await ViewModel!.LoadDirectoryItemsCommand.Execute()">
                Refresh
            </MudButton>
        </MudStack>
    </MudPaper>

    <MudTreeView T="DirectoryItem" ServerData="@ViewModel!.HandleExpand" Items="@ViewModel?.TreeItems"
                 Hover="true"  MaxHeight="20rem"
                 SelectionMode="SelectionMode.SingleSelection"
                 Disabled="@(ViewModel?.Disabled == true || (ViewModel?.Loading ?? false))"
                 SelectedValueChanged="v => ViewModel!.SelectedPath = v.Path">
        <ItemTemplate>
            <MudTreeViewItem T="DirectoryItem?" @key="context.Value?.Path" Value="@context.Value"
                             Text="@context.Value?.Name"
                             Icon="@Icons.Material.Filled.FolderOpen"
                             ItemsChanged="@(new Action<IReadOnlyCollection<TreeItemData<DirectoryItem?>>?>(items => ViewModel?.HandleItemsLoaded(context, items)))"
                             CanExpand="@context.Expandable"
                             @bind-Expanded="@context.Expanded"
                             Items="@context.Children"
                             OnDoubleClick="@(() => ViewModel!.RootDirectory = context.Value!.Path)" />
        </ItemTemplate>
    </MudTreeView>
    <MudStack Row="true" AlignItems="AlignItems.Center">
        <MudStack Row="true" AlignItems="AlignItems.Baseline" Style="flex-grow: 1">

            <MudText Typo="Typo.subtitle2" Class="mb-2">Selected Folder:</MudText>
            <MudInputString Required="@Required" Value="@ViewModel?.SelectedPath"
                            Disabled="@(ViewModel?.Disabled == true || (ViewModel?.Loading ?? false))"
                            Class="flex-grow-1" ReadOnly="true" />
        </MudStack>
        <MudIconButton Icon="@Icons.Material.Sharp.Clear"
                       OnClick="(e) => SelectedPath = null"
                       Disabled="@(ViewModel?.Disabled == true || Required || (ViewModel?.Loading ?? false))"
                       title="Clear selection"  />
    </MudStack>
</MudPaper>

@code {
    [Parameter]
    public bool Required { get; set; } = false;

    [Parameter][EditorRequired] public required string RootDirectory { get; set; }

    [Parameter] public string? SelectedPath { get; set; }

    [Parameter]
    public EventCallback<string> SelectedPathChanged { get; set; }

    [Parameter][EditorRequired] public required string Title { get; set; }

    [Parameter] public bool Disabled { get; set; }

    protected override void OnInitialized()
    {
        this.WhenActivated(disposables =>
        {
            ViewModel!.WhenPathSelected
                .Subscribe(path => SelectedPathChanged.InvokeAsync(path))
                .DisposeWith(disposables);

            this.Bind(ViewModel, vm => vm.RootDirectory, view => view.RootDirectory);

            this.Bind(ViewModel, vm => vm.SelectedPath, view => view.SelectedPath);

            this.Bind(ViewModel, vm => vm.Title, view => view.Title);

            this.Bind(ViewModel, vm => vm.Disabled, view => view.Disabled);
        });
        base.OnInitialized();
    }
}