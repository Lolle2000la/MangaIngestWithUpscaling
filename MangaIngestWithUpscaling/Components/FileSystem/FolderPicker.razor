@inherits ReactiveComponentBase<FolderPickerViewModel>
@using System.IO
@using MudBlazor

@inject FolderPickerViewModel viewModel

<MudPaper Class="pa-4" Elevation="5">
    <MudText Typo="Typo.h6" Class="mb-4">@ViewModel.Title</MudText>

    <MudStack Row="true" AlignItems="AlignItems.Baseline">
        <MudText Typo="Typo.subtitle2" Class="mb-2">Current Path: </MudText>
        <MudInputString @bind-Value="ViewModel.RootDirectory" Class="mb-2 flex-grow-1" FullWidth="true" />
    </MudStack>

    @if (ViewModel.ErrorMessage != null)
    {
        <MudAlert Severity="Severity.Error">@ViewModel.ErrorMessage</MudAlert>
    }

    <MudPaper Elevation="2">
        <MudStack Row="true" AlignItems="AlignItems.Center">
            <MudButton Variant="Variant.Outlined" OnClick="async (e) => await ViewModel.GoToParentCommand.Execute()" Disabled="@(!ViewModel.CanGoToParent)">
                Go to Parent
            </MudButton>
            <MudSpacer />
            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="async (e) => await ViewModel.LoadDirectoryItemsCommand.Execute()">
                <MudIcon Icon="@Icons.Material.Filled.Refresh" /> Refresh
            </MudButton>
        </MudStack>
    </MudPaper>

    <MudTreeView T="DirectoryItem" ServerData="@ViewModel.HandleExpand" Items="@ViewModel.TreeItems" Activatable="true"
                 Hover="true" Loading="@ViewModel.Loading" MaxHeight="20rem"
                 SelectionMode="SelectionMode.SingleSelection"
                 SelectedValueChanged="v => ViewModel.SelectedPath = v.Path">
        <ItemTemplate>
            <MudTreeViewItem T="DirectoryItem" @key="context.Value.Path" Value="@context.Value" Text="@context.Value?.Name"
                             Icon="@Icons.Material.Filled.FolderOpen"
                             ItemsChanged="@(new Action<IReadOnlyCollection<TreeItemData<DirectoryItem>>>(items => ViewModel.HandleItemsLoaded(context, items)))"
                             CanExpand="@context.Expandable"
                             @bind-Expanded="@context.Expanded"
                             Items="@context.Children"
                             OnDoubleClick="@(() => ViewModel.RootDirectory = context.Value.Path)" />
        </ItemTemplate>
    </MudTreeView>
    <MudText Typo="Typo.subtitle2" Class="mb-2">Selected Folder: @ViewModel.SelectedPath</MudText>
</MudPaper>

@code {
    [Parameter]
    public string RootDirectory
    {
        get => ViewModel.RootDirectory;
        set => ViewModel.RootDirectory = value;
    }

    private void NotifySelectionChanged(string path)
    {
        Console.WriteLine($"Selected path: {path}");
    }

    [Parameter]
    public EventCallback<string> OnPathSelected { get; set; }

    [Parameter]
    public string Title
    {
        get => ViewModel.Title;
        set => ViewModel.Title = value;
    }

    protected override void OnInitialized()
    {
        ViewModel = viewModel;
        this.WhenActivated(disposables =>
        {
            Console.WriteLine("FolderPicker Activated");
            ViewModel.WhenPathSelected
                .Subscribe(path => OnPathSelected.InvokeAsync(path))
                .DisposeWith(disposables);
        });
        base.OnInitialized();
    }
}