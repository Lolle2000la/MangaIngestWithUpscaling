@page "/upscaling/profiles/edit/{ProfileId:int}"
@using MangaIngestWithUpscaling.Shared.Data.LibraryManagement

@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager

<PageTitle>Edit Upscaler Profile "@Profile.Name"</PageTitle>

<MudCard>
    <MudCardHeader>
        <MudText Typo="Typo.h5">Edit Upscaler Profile: @Profile.Name</MudText>
    </MudCardHeader>
    <MudCardContent>
        <UpscalerProfileForm @bind-Profile="Profile"
                             @bind-IsValid="IsValid"/>
    </MudCardContent>
    <MudCardActions>
        <MudSpacer/>
        <MudButton StartIcon="@Icons.Material.Filled.Save"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   Disabled="!IsValid"
                   OnClick="OnSaveProfile">Save
        </MudButton>
    </MudCardActions>
</MudCard>

@code {
    [Parameter] public int? ProfileId { get; set; }

    public UpscalerProfile Profile { get; set; } = new UpscalerProfile()
    {
        Name = "",
        ScalingFactor = ScaleFactor.TwoX,
        CompressionFormat = CompressionFormat.Webp,
        Quality = 80
    };

    private UpscalerProfile? existingProfile;

    public bool IsValid { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        if (ProfileId.HasValue)
        {
            existingProfile = await DbContext.UpscalerProfiles.FindAsync(ProfileId.Value);
            if (existingProfile != null)
            {
                Profile = new UpscalerProfile
                {
                    Name = existingProfile.Name,
                    ScalingFactor = existingProfile.ScalingFactor,
                    CompressionFormat = existingProfile.CompressionFormat,
                    Quality = existingProfile.Quality,
                    UpscalerMethod = existingProfile.UpscalerMethod
                };
            }
            else
            {
                NavigationManager.NavigateTo("/upscaling/profiles");
            }
        }
        else
        {
            NavigationManager.NavigateTo("/upscaling/profiles");
        }
    }

    private async Task OnSaveProfile()
    {
        if (existingProfile is null)
        {
            return;
        }

        DbContext.UpscalerProfiles.Add(Profile);
        existingProfile.Deleted = true;
        await DbContext.SaveChangesAsync();
        // change all references to existingProfile to Profile, except for concrete chapters
        // (right now this is only the upscaler profile id in the library))
        await DbContext.Libraries
            .Where(l => l.UpscalerProfileId == existingProfile.Id)
            .ExecuteUpdateAsync(s => s.SetProperty(l => l.UpscalerProfileId, Profile.Id));

        await DbContext.MangaSeries
            .Where(m => m.UpscalerProfilePreferenceId == existingProfile.Id)
            .ExecuteUpdateAsync(s => s.SetProperty(m => m.UpscalerProfilePreferenceId, Profile.Id));

        await DbContext.SaveChangesAsync();
        NavigationManager.NavigateTo("/upscaling/profiles");
    }

}
