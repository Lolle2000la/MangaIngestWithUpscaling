@using MangaIngestWithUpscaling.Data.LibraryManagement

<MudForm Model="@Profile">
    <MudGrid Spacing="4">
        <MudItem xs="12">
            <MudTextField Label="Name"
                          @bind-Value="@Profile.Name"
                          @bind-Value:after="OnInputChanged"
                          Required="true" />
        </MudItem>
        <MudItem xs="12" sm="4">
            <MudSelect Label="Scaling Factor"
                       @bind-Value="@Profile.ScalingFactor"
                       @bind-Value:after="OnInputChanged"
                       Required="true">
                @foreach (ScaleFactor factor in Enum.GetValues(typeof(ScaleFactor)))
                {
                    <MudSelectItem Value="@factor">@factor.GetDisplayName()</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="4">
            <MudSelect Label="Compression Format"
                       @bind-Value="@Profile.CompressionFormat"
                       @bind-Value:after="OnInputChanged"
                       Required="true">
                @foreach (CompressionFormat format in Enum.GetValues(typeof(CompressionFormat)))
                {
                    <MudSelectItem Value="@format">@format.GetDisplayName()</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="4">
            <MudNumericField Label="Quality"
                             @bind-Value="@Profile.Quality"
                             @bind-Value:after="OnInputChanged"
                             Min="1"
                             Max="100"
                             Step="1"
                             Required="true" />
        </MudItem>
    </MudGrid>
</MudForm>

@code {
    [Parameter]
    public UpscalerProfile Profile { get; set; } = new UpscalerProfile
        {
            Name = "",
            ScalingFactor = ScaleFactor.TwoX,
            CompressionFormat = CompressionFormat.Webp,
            Quality = 80
        };
    [Parameter]
    public EventCallback<UpscalerProfile> ProfileChanged { get; set; }

    [Parameter]
    public bool IsValid { get; set; } = false;
    [Parameter]
    public EventCallback<bool> IsValidChanged { get; set; }

    protected void OnInputChanged()
    {
        ProfileChanged.InvokeAsync(Profile);
        IsValid = Validate();
        IsValidChanged.InvokeAsync(IsValid);
    }

    private bool Validate()
    {
        bool requiredElementsValid = !string.IsNullOrWhiteSpace(Profile.Name);
        return requiredElementsValid;
    }
}
