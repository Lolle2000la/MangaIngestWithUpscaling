@inherits LayoutComponentBase

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="@_theme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="4" Color="Color.Primary">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" 
                       Color="Color.Inherit" 
                       Edge="Edge.Start" 
                       OnClick="@((e) => DrawerToggle())" 
                       Size="Size.Large" />
        <MudSpacer />
        <MudLink Href="" Class="d-flex align-center" Style="text-decoration: none;">
            <MudIcon Icon="@Icons.Material.Filled.AutoStories" Color="Color.Inherit" Class="mr-3" Size="Size.Large" />
            <MudText Typo="Typo.h5" Color="Color.Inherit" Class="font-weight-medium">
                Manga Ingest Dashboard
            </MudText>
        </MudLink>
        <MudSpacer />
        <MudIconButton Icon="@(_isDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)" 
                       Color="Color.Inherit" 
                       OnClick="@ToggleTheme" />
    </MudAppBar>

    <MudDrawer @bind-Open="@_drawerOpen" 
               Elevation="1" 
               Variant="@DrawerVariant.Mini" 
               OpenMiniOnHover="true"
               ClipMode="DrawerClipMode.Always">
        <MudDrawerHeader Class="py-6">
            <div class="d-flex align-center">
                <MudIcon Icon="@Icons.Material.Filled.AutoStories" 
                         Color="Color.Primary" 
                         Size="Size.Large" 
                         Class="mr-3" />
                <MudText Typo="Typo.h6" Color="Color.Primary" Class="font-weight-bold">
                    MangaIngest
                </MudText>
            </div>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>

    <MudMainContent Class="mt-16 pt-4">
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="my-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private bool _isDarkMode;
    private MudThemeProvider? _mudThemeProvider;

    private readonly MudTheme _theme = new()
    {
        PaletteLight = new PaletteLight()
        {
            Primary = "#1976d2",
            Secondary = "#424242",
            AppbarBackground = "#1976d2",
            Background = "#f5f5f5",
            BackgroundGray = "#fafafa",
            Surface = "#ffffff",
            DrawerBackground = "#ffffff",
            DrawerText = "rgba(0,0,0, 0.87)",
            DrawerIcon = "rgba(0,0,0, 0.6)",
            AppbarText = "#ffffff",
            TextPrimary = "rgba(0,0,0, 0.87)",
            TextSecondary = "rgba(0,0,0, 0.6)",
            ActionDefault = "rgba(0,0,0, 0.54)",
            ActionDisabled = "rgba(0,0,0, 0.26)",
            ActionDisabledBackground = "rgba(0,0,0, 0.12)",
        },
        PaletteDark = new PaletteDark()
        {
            Primary = "#90caf9",
            Secondary = "#f48fb1",
            AppbarBackground = "#1e1e1e",
            Background = "#121212",
            BackgroundGray = "#1e1e1e",
            Surface = "#1e1e1e",
            DrawerBackground = "#1e1e1e",
            DrawerText = "#ffffff",
            DrawerIcon = "rgba(255,255,255, 0.6)",
            AppbarText = "#ffffff",
            TextPrimary = "#ffffff",
            TextSecondary = "rgba(255,255,255, 0.7)",
            ActionDefault = "rgba(255,255,255, 0.6)",
            ActionDisabled = "rgba(255,255,255, 0.3)",
            ActionDisabledBackground = "rgba(255,255,255, 0.12)",
        }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _mudThemeProvider != null)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemDarkModeAsync();
            StateHasChanged();
        }
    }

    void ToggleTheme()
    {
        _isDarkMode = !_isDarkMode;
    }
}