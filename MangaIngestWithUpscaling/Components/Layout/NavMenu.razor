@implements IDisposable

@inject NavigationManager NavigationManager
@inject IConfiguration Configuration


<MudNavMenu Margin="Margin.Dense">
    <MudNavGroup Title="Main" Icon="@Icons.Material.Filled.Dashboard" Expanded="true">
        <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">
            Home
        </MudNavLink>
        <MudNavLink Href="libraries" Icon="@Icons.Material.Filled.LibraryBooks">
            Libraries
        </MudNavLink>
        <MudNavLink Href="mangas" Icon="@Icons.Material.Filled.Book">
            Mangas
        </MudNavLink>
    </MudNavGroup>
    
    <MudNavGroup Title="Configuration" Icon="@Icons.Material.Filled.Settings" Expanded="false">
        <MudNavLink Href="upscaling/profiles" Icon="@Icons.Material.Filled.ImageAspectRatio">
            Upscale Profiles
        </MudNavLink>
    </MudNavGroup>
    
    <MudNavGroup Title="System" Icon="@Icons.Material.Filled.Computer" Expanded="false">
        <MudNavLink Href="tasks" Icon="@Icons.Material.Filled.Task">
            Tasks
        </MudNavLink>
        <MudNavLink Href="logs" Icon="@Icons.Material.Filled.List">
            Logs
        </MudNavLink>
    </MudNavGroup>

    <MudDivider Class="my-2" />
    
    <AuthorizeView>
        <Authorized>
            @if (Configuration.GetValue<bool>("OIDC:Enabled"))
            {
                <MudNavLink Href="Account/Manage" Icon="@Icons.Material.Filled.ManageAccounts">
                    @context.User.Identity?.Name
                </MudNavLink>
                <form action="/Account/LogoutOidc" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    <button type="submit" class="mud-nav-link mud-ripple">
                        <MudIcon Class="mud-icon-root mud-icon-default mud-svg-icon mud-icon-size-medium mud-nav-link-icon mud-nav-link-icon-default"
                                 Icon="@Icons.Material.Filled.Logout" />
                        <div class="mud-nav-link-text">Logout</div>
                    </button>
                </form>
            }
            else
            {
                <MudNavLink Href="Account/Manage" Icon="@Icons.Material.Filled.ManageAccounts">
                    @context.User.Identity?.Name
                </MudNavLink>
                <form action="Account/Logout" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    <button type="submit" class="mud-nav-link mud-ripple">
                        <MudIcon Class="mud-icon-root mud-icon-default mud-svg-icon mud-icon-size-medium mud-nav-link-icon mud-nav-link-icon-default"
                                 Icon="@Icons.Material.Filled.Logout" />
                        <div class="mud-nav-link-text">Logout</div>
                    </button>
                </form>
            }
        </Authorized>
        <NotAuthorized>
            @if (!Configuration.GetValue<bool>("OIDC:Enabled"))
            {
                <MudNavLink Href="Account/Register" Icon="@Icons.Material.Filled.PersonAdd">
                    Register
                </MudNavLink>
                <MudNavLink Href="Account/Login" Icon="@Icons.Material.Filled.Login">
                    Login
                </MudNavLink>
            }
            else
            {
                <MudNavLink Href="/Account/LoginOidc" Icon="@Icons.Material.Filled.Login">
                    Login with OIDC
                </MudNavLink>
            }
        </NotAuthorized>
    </AuthorizeView>
</MudNavMenu>

@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    private void Logout()
    {
        NavigationManager.NavigateTo("Account/Logout", true);
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}