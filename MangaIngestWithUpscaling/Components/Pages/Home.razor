@page "/"
@using MangaIngestWithUpscaling.Services.BackgroundTaskQueue
@using MangaIngestWithUpscaling.Services.BackgroundTaskQueue.Tasks

@inject ITaskQueue TaskQueue
@inject IWebHostEnvironment WebHostEnvironment

<PageTitle>Home</PageTitle>

<MudStack>
    <MudText Typo="Typo.h3">How to use</MudText>

    <MudText Typo="Typo.body1">
        A few steps to get you started:
        <ol class="ml-5">
            <li>Set up a library in the
                <MudLink href="libraries">Libraries</MudLink>
                section.
            </li>
            <li>Add a few mangas by adding them to your configured ingest folder.</li>
            <li>Wait for the system to ingest the mangas and chapters.</li>
            <li>Upscale the chapters you want to upscale. If you set it up that way, it should automatically start
                upscaling right now.
            </li>
        </ol>
    </MudText>

    <MudExpansionPanels>
        <MudExpansionPanel Text="Dependencies & Licenses">
            <ul>
                <li>
                    <MudLink Href="https://github.com/the-database/MangaJaNai/blob/main/LICENSE" Target="_blank">
                        MangaJaNai
                    </MudLink>
                    - Attribution-NonCommercial 4.0 International<br/>
                    At the moment the only supported upscaling model provided. Very good quality, specifically for
                    Manga.
                </li>
                <li>
                    <MudLink Href="https://github.com/the-database/MangaJaNaiConverterGui/blob/main/LICENSE"
                             Target="_blank">
                        MangaJaNaiConverterGui
                    </MudLink>
                    - GNU General Public License v3.0<br/>
                    The same upscaling code from MangaJaNaiConverterGui is used here, but without the GUI. <br/>
                    The GUI is Windows-only right now, but you can also find a CLI in there that works on Linux.<br/>
                    This project uses the CLI to automate upscaling and integrate it into the ingesting process.
                </li>
                <li>
                    <MudLink Href="https://github.com/dotnet/aspnetcore/blob/main/LICENSE.txt" Target="_blank">.NET,
                        ASP.NET Core, and Entity Framework Core
                    </MudLink>
                    - MIT License
                </li>
                <li>
                    <MudLink Href="https://github.com/patrickklaeren/AutoRegisterInject/blob/main/LICENSE.txt"
                             Target="_blank">AutoRegisterInject
                    </MudLink>
                    - MIT License
                </li>
                <li>
                    <MudLink Href="https://github.com/reactivemarbles/DynamicData/blob/main/LICENSE" Target="_blank">
                        DynamicData
                    </MudLink>
                    - MIT License
                </li>
                <li>
                    <MudLink Href="https://github.com/grpc/grpc-dotnet/blob/master/LICENSE" Target="_blank">
                        Grpc.AspNetCore
                    </MudLink>
                    - Apache-2.0 License
                </li>
                <li>
                    <MudLink Href="https://github.com/mono/mono/blob/main/LICENSE" Target="_blank">
                        Mono.Posix.NETStandard
                    </MudLink>
                    - MIT License
                </li>
                <li>
                    <MudLink Href="https://github.com/MudBlazor/MudBlazor/blob/dev/LICENSE" Target="_blank">MudBlazor
                    </MudLink>
                    - MIT License
                </li>
                <li>
                    <MudLink Href="https://github.com/kleisauke/net-vips/blob/master/LICENSE" Target="_blank">
                        NetVips
                    </MudLink>
                    - MIT License<br/>
                    .NET bindings for libvips, used for high-performance image processing and format support.
                </li>
                <li>
                    <MudLink Href="https://github.com/libvips/libvips/blob/master/LICENSE" Target="_blank">
                        libvips
                    </MudLink>
                    - LGPL-2.1-or-later<br/>
                    Fast image processing library powering the NetVips backend.
                </li>
                <li>
                    <MudLink Href="https://github.com/PinguApps/Blazor.QRCode/blob/main/LICENSE" Target="_blank">
                        PinguApps.Blazor.QRCode
                    </MudLink>
                    - MIT License
                </li>
                <li>
                    <MudLink Href="https://github.com/reactiveui/ReactiveUI/blob/main/LICENSE" Target="_blank">
                        ReactiveUI
                    </MudLink>
                    - MIT License
                </li>
                <li>
                    <MudLink Href="https://github.com/reactivemarbles/ObservableEvents/blob/main/LICENSE"
                             Target="_blank">ReactiveMarbles.ObservableEvents.SourceGenerator
                    </MudLink>
                    - MIT License
                </li>
                <li>
                    <MudLink Href="https://github.com/serilog/serilog/blob/dev/LICENSE" Target="_blank">Serilog
                    </MudLink>
                    - Apache-2.0 License
                </li>
                <li>
                    <MudLink Href="https://github.com/Velopack/Velopack/blob/master/LICENSE" Target="_blank">Velopack
                    </MudLink>
                    - MIT License
                </li>
            </ul>
        </MudExpansionPanel>
    </MudExpansionPanels>

    @if (WebHostEnvironment.IsDevelopment())
    {
        <MudPaper Elevation="2">
            <h3>Task Queue test</h3>
            <MudInput @bind-Value="message" Label="Message"/>
            <MudButton OnClick="TestTaskQueue" Variant="Variant.Filled">Enqueue logging Task</MudButton>
        </MudPaper>
    }
</MudStack>

@code {
    private string message = "Hello, world!";

    private async Task TestTaskQueue()
    {
        await TaskQueue.EnqueueAsync(new LoggingTask { Message = message });
    }
}