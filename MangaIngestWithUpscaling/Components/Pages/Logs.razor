@page "/logs"
@using MangaIngestWithUpscaling.Data.LogModel
@inject LoggingDbContext DbContext
@inject IDialogService DialogService

<PageTitle>Logs</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <div class="d-flex flex-column flex-sm-row align-start align-sm-center justify-space-between mb-6 gap-4">
            <div class="d-flex align-center">
                <MudIcon Icon="@Icons.Material.Filled.List" Color="Color.Primary" Size="Size.Large" Class="mr-3" />
                <MudText Typo="Typo.h3" Color="Color.Primary">System Logs</MudText>
            </div>
            <div class="d-flex align-center gap-2">
                <MudText Typo="Typo.body2" Color="Color.Surface">Filter Level:</MudText>
                <MudSelect @bind-Value="_selectedLevel" 
                           @bind-Value:after="async () => await table.ReloadServerData()" 
                           Variant="Variant.Outlined"
                           Margin="Margin.Dense"
                           Immediate="true"
                           Style="min-width: 150px;">
                    @foreach (var level in Enum.GetValues<LogLevel>())
                    {
                        <MudSelectItem Value="@level">@level.ToString()</MudSelectItem>
                    }
                </MudSelect>
            </div>
        </div>
    </MudItem>

    <MudItem xs="12">
        <MudPaper Elevation="2">
            <MudTable T="Log" Items="@_logs" 
                      Hover="true" 
                      ServerData="@ServerData"
                      SortLabel="Timestamp"
                      @ref="table"
                      HorizontalScrollbar="true"
                      Dense="true"
                      Breakpoint="Breakpoint.None"
                      OnRowClick="OnRowClick"
                      FixedHeader="true"
                      Height="70vh">
                
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Application Logs</MudText>
                    <MudSpacer />
                    <MudText Typo="Typo.body2" Color="Color.Surface">
                        Click any row to view details
                    </MudText>
                </ToolBarContent>

                <HeaderContent>
                    <MudTh Style="width: 180px;"><MudText Typo="Typo.subtitle2">Timestamp</MudText></MudTh>
                    <MudTh Style="width: 120px;"><MudText Typo="Typo.subtitle2">Level</MudText></MudTh>
                    <MudTh><MudText Typo="Typo.subtitle2">Message</MudText></MudTh>
                    <MudTh Style="width: 100px;"><MudText Typo="Typo.subtitle2">Exception</MudText></MudTh>
                </HeaderContent>

                <RowTemplate>
                    <MudTd DataLabel="Timestamp" Style="width: 180px;">
                        <div class="d-flex flex-column">
                            <MudText Typo="Typo.body2" Class="font-weight-medium">
                                @context.Timestamp.ToLocalTime().ToString("MM/dd HH:mm:ss")
                            </MudText>
                            <MudText Typo="Typo.caption" Color="Color.Surface">
                                @context.Timestamp.ToLocalTime().ToString("yyyy")
                            </MudText>
                        </div>
                    </MudTd>

                    <MudTd DataLabel="Level" Style="width: 120px;">
                        <MudChip T="string" 
                                 Color="@GetLevelColor(context.Level)" 
                                 Variant="Variant.Filled" 
                                 Size="Size.Small"
                                 Icon="@GetLevelIcon(context.Level)">
                            @context.Level
                        </MudChip>
                    </MudTd>

                    <MudTd DataLabel="Message" Class="log-message">
                        <MudTooltip Text="@context.RenderedMessage">
                            <MudText Typo="Typo.body2" 
                                     Class="text-truncate" 
                                     Style="max-width: 500px;">
                                @context.RenderedMessage
                            </MudText>
                        </MudTooltip>
                    </MudTd>

                    <MudTd DataLabel="Exception" Style="width: 100px;">
                        @if (!string.IsNullOrEmpty(context.Exception))
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Error" 
                                     Color="Color.Error" 
                                     Size="Size.Small"
                                     title="Has Exception" />
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" 
                                     Color="Color.Success" 
                                     Size="Size.Small"
                                     title="No Exception" />
                        }
                    </MudTd>
                </RowTemplate>

                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[]{10, 25, 50, 100}" />
                </PagerContent>
            </MudTable>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private List<Log> _logs = new();
    private LogLevel _selectedLevel = LogLevel.Warning;

    private MudTable<Log> table = null!;

    private async Task<TableData<Log>> ServerData(TableState state, CancellationToken cancellationToken)
    {
        IQueryable<Log> query = DbContext.Logs;

        var logLevels = Enum.GetNames<LogLevel>()
            .Skip((int)_selectedLevel)
            .ToList();

        query = query.Where(log => logLevels.Contains(log.Level));

        query = state.SortLabel switch
        {
            "Timestamp" => (state.SortDirection == SortDirection.Ascending)
                ? query.OrderBy(log => log.Timestamp)
                : query.OrderByDescending(log => log.Timestamp),
            _ => query.OrderByDescending(log => log.Timestamp)
        };

        var totalItems = await query.CountAsync(cancellationToken);
        var items = await query
            .Skip(state.Page * state.PageSize)
            .Take(state.PageSize)
            .ToListAsync(cancellationToken);

        return new TableData<Log> { TotalItems = totalItems, Items = items };
    }

    private Color GetLevelColor(string level)
    {
        return level?.ToUpper() switch
        {
            "ERROR" => Color.Error,
            "WARNING" => Color.Warning,
            "INFORMATION" => Color.Info,
            "DEBUG" => Color.Default,
            _ => Color.Default
        };
    }

    private string GetLevelIcon(string level)
    {
        return level?.ToUpper() switch
        {
            "ERROR" => Icons.Material.Filled.Error,
            "WARNING" => Icons.Material.Filled.Warning,
            "INFORMATION" => Icons.Material.Filled.Info,
            "DEBUG" => Icons.Material.Filled.BugReport,
            _ => Icons.Material.Filled.Circle
        };
    }

    private async Task OnRowClick(TableRowClickEventArgs<Log> args)
    {
        if (args.Item != null)
        {
            await ShowLogDialog(args.Item);
        }
    }

    private async Task ShowLogDialog(Log log)
    {
        var parameters = new DialogParameters { ["Log"] = log };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        await DialogService.ShowAsync<LogDetailDialog>("Log Details", parameters, options);
    }
}