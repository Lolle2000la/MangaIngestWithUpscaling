@page "/logs"
@using MangaIngestWithUpscaling.Data.LogModel
@using Microsoft.EntityFrameworkCore
@using System.Linq
@inject LoggingDbContext DbContext

<PageTitle>Logs</PageTitle>

<MudTable T="Log" Items="@_logs" Hover="true" ServerData="@ServerData"
          SortLabel="Timestamp" SortDirection="SortDirection.Descending"
          HorizontalScrollbar="true"
          Dense="true"
          Breakpoint="Breakpoint.None">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Application Logs</MudText>
        <MudSpacer />
        <MudSelect @bind-Value="_selectedLevel" Label="Logging level filter">
            @foreach (var level in Enum.GetValues<LogLevel>())
            {
                <MudSelectItem Value="@level">@level.ToString()</MudSelectItem>
            }
        </MudSelect>
    </ToolBarContent>

    <HeaderContent>
        <MudTh>Timestamp</MudTh>
        <MudTh>Level</MudTh>
        <MudTh>Message</MudTh>
        <MudTh>Exception</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Timestamp">
            @context.Timestamp.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")
        </MudTd>

        <MudTd DataLabel="Level">
            <MudChip T="string" Color="@GetLevelColor(context.Level)" Variant="Variant.Filled" Class="ma-1">
                @context.Level
            </MudChip>
        </MudTd>

        <MudTd DataLabel="Message" Style="max-width: 300px;">
            <MudText Truncate="true">@context.RenderedMessage</MudText>
        </MudTd>

        <MudTd DataLabel="Exception" Style="max-width: 200px;">
            @if (!string.IsNullOrEmpty(context.Exception))
            {
                <MudTooltip Text="@context.Exception">
                    <MudText Truncate="true" Class="text-error">@context.Exception</MudText>
                </MudTooltip>
            }
        </MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private List<Log> _logs = new();
    private LogLevel _selectedLevel = LogLevel.Warning;

    private async Task<TableData<Log>> ServerData(TableState state, CancellationToken cancellationToken)
    {
        IQueryable<Log> query = DbContext.Logs;

        var logLevels = Enum.GetNames<LogLevel>()
            .Skip((int)_selectedLevel)
            .ToList();

        query = query.Where(log => logLevels.Contains(log.Level));

        query = state.SortLabel switch
        {
            "Timestamp" => (state.SortDirection == SortDirection.Ascending)
                ? System.Linq.Queryable.OrderBy(query, log => log.Timestamp)
                : System.Linq.Queryable.OrderByDescending(query, log => log.Timestamp),
            _ => System.Linq.Queryable.OrderByDescending(query, log => log.Timestamp)
        };

        var totalItems = await query.CountAsync(cancellationToken);
        var items = await query
            .Skip(state.Page * state.PageSize)
            .Take(state.PageSize)
            .ToListAsync(cancellationToken);

        return new TableData<Log> { TotalItems = totalItems, Items = items };
    }

    private Color GetLevelColor(string level)
    {
        return level?.ToUpper() switch
        {
            "ERROR" => Color.Error,
            "WARNING" => Color.Warning,
            "INFORMATION" => Color.Info,
            "DEBUG" => Color.Default,
            _ => Color.Default
        };
    }
}