@page "/mangas/{MangaId:int}"
@using MangaIngestWithUpscaling.Components.MangaManagement.Chapters
@using MangaIngestWithUpscaling.Data.LibraryManagement
@using MangaIngestWithUpscaling.Services.MetadataHandling
@using MangaIngestWithUpscaling.Shared.Data.LibraryManagement

@inject ApplicationDbContext DbContext
@inject IMangaMetadataChanger MetadataChanger
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject ILogger<EditManga> Logger

@if (manga is not null)
{
    <PageTitle>Edit "@manga.PrimaryTitle"</PageTitle>

    <MudStack>
        <MudForm @ref="form" @bind-IsValid="isValid" @bind-IsTouched="isTouched">
            <MudCard Elevation="2">
                <MudCardHeader>
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <a href="mangas">
                            <MudIconButton Icon="@Icons.Material.Filled.ArrowBack"/>
                        </a>
                        <MudText Typo="Typo.h4">Edit "@manga.PrimaryTitle"</MudText>
                    </MudStack>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid Spacing="4">
                        <MudItem xs="12">
                            <MudText Typo="Typo.h5">General Information</MudText>
                        </MudItem>
                        <MudItem xs="12">
                            <MudStack Spacing="0">
                                <MudTextField Label="Primary Title"
                                              @bind-Value="manga.PrimaryTitle"
                                              Immediate="true"
                                              Variant="Variant.Outlined"
                                              HelperText="The primary title you want this manga to go by."
                                              Required/>
                                <MudCheckBox T="bool" Label="Add old title to other titles automatically when changed."
                                             @bind-Value="addOldTitleToOtherTitles"
                                             Size="Size.Small"/>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="12">
                            <MudSelect T="int?" Label="Upscaler Profile Preference"
                                       @bind-Value="manga.UpscalerProfilePreferenceId"
                                       HelperText="Overrides the library's default upscaler profile for this manga.">
                                <MudSelectItem T="int?" Value="@((int?)null)">None (use library default)</MudSelectItem>
                                @foreach (var profile in upscalerProfiles)
                                {
                                    <MudSelectItem T="int?" Value="@profile.Id">@profile.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12">
                            <MudSelect T="bool?" Label="Merge Chapter Parts (Experimental)"
                                       @bind-Value="manga.MergeChapterParts"
                                       HelperText="Controls whether chapter parts (e.g., Ch 20.1, Ch 20.2) are automatically merged into single chapters for this manga.">
                                <MudSelectItem T="bool?" Value="@((bool?)null)">Default (use library setting)
                                </MudSelectItem>
                                <MudSelectItem T="bool?" Value="@true">Always merge chapter parts</MudSelectItem>
                                <MudSelectItem T="bool?" Value="@false">Never merge chapter parts</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12">
                            <MudStack>
                                <MudText Typo="Typo.h6">Other Titles</MudText>
                                <MudText Typo="Typo.body1">
                                    Other titles this manga is known by.
                                    Mangas in ingest will be sorted into the folders using these.
                                </MudText>
                                <MudStack>
                                    <MudStack Row="true" Spacing="1">
                                        <MudTextField Label="New Title" @bind-Value="newTitle"
                                                      Immediate="true"
                                                      Class="flex-grow-1"
                                                      @ref="newTitleField"/>
                                        <MudIconButton Icon="@Icons.Material.Filled.AddCircle"
                                                       Size="Size.Medium" Class="flex-shrink-0"
                                                       Disabled="string.IsNullOrWhiteSpace(newTitle)"
                                                       OnClick="_ => AddAlternativeTitle()" Color="Color.Success"/>
                                    </MudStack>
                                    <MudList T="MangaAlternativeTitle"
                                             @ref="titlesList" @bind-SelectedValues="selectedTitles">
                                        @foreach (var title in manga.OtherTitles.OrderBy(t => t.Title))
                                        {
                                            <MudListItem Value="@title">
                                                <MudStack Row="true" AlignItems="AlignItems.Center">
                                                    <MudText>@title.Title</MudText>
                                                    <MudSpacer/>
                                                    <MudIconButton Icon="@Icons.Material.Filled.RemoveCircle"
                                                                   Color="Color.Error"
                                                                   Size="Size.Small"
                                                                   OnClick="() => manga.OtherTitles.Remove(title)"/>
                                                </MudStack>
                                            </MudListItem>
                                        }
                                    </MudList>
                                </MudStack>
                            </MudStack>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                <MudCardActions>
                    <MudSpacer/>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Save"
                               Disabled="@(!isTouched || !isValid)">Save
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudForm>

        <MudCard>
            <MudCardHeader>
                <MudStack>
                    <MudText Typo="Typo.h5">Chapters</MudText>
                    <MudText>
                        Manage the chapters of this manga.
                    </MudText>
                    <MudText Color="Color.Error">
                        Deleting a chapter will remove it from the library and the filesystem.
                    </MudText>
                </MudStack>
            </MudCardHeader>
            <MudCardContent>
                <ChapterList Manga="manga"/>
            </MudCardContent>
        </MudCard>
    </MudStack>
}
else
{
    <MudText Typo="Typo.h4">Loading...</MudText>
}

@code {
    [Parameter] public required int MangaId { get; set; }

    private Manga? manga;
    private bool isValid;
    private bool isTouched;
    private string originalTitle = string.Empty;
    private string newTitle = string.Empty;
    private bool addOldTitleToOtherTitles = true;
    private List<UpscalerProfile> upscalerProfiles = [];

    private IReadOnlyCollection<MangaAlternativeTitle>? selectedTitles;

    private MudForm form = default!;
    private MudList<MangaAlternativeTitle> titlesList = default!;
    private MudTextField<string> newTitleField = default!;

    protected override async Task OnInitializedAsync()
    {
        manga = await DbContext.MangaSeries
            .Include(m => m.Library)
            .Include(m => m.Chapters)
            .ThenInclude(c => c.UpscalerProfile)
            .Include(m => m.OtherTitles)
            .Include(m => m.UpscalerProfilePreference)
            .FirstOrDefaultAsync(m => m.Id == MangaId);

        if (manga == null)
        {
            NavigationManager.NavigateTo("/mangas");
            return;
        }

        originalTitle = manga.PrimaryTitle;
        upscalerProfiles = await DbContext.UpscalerProfiles.ToListAsync();
    }

    private void AddAlternativeTitle()
    {
        if (!string.IsNullOrEmpty(newTitle) && manga is not null)
        {
            manga.OtherTitles.Add(new MangaAlternativeTitle
            {
                Title = newTitle,
                MangaId = manga.Id,
                Manga = manga
            });
        }
    }


    private async Task Save()
    {
        if (manga is null)
        {
            return;
        }

        await form.Validate();
        if (!isValid)
        {
            Snackbar.Add("Please fix the errors in the form.", Severity.Error);
            return;
        }

        try
        {
            if (manga.PrimaryTitle != originalTitle)
            {
                var newTitle = manga.PrimaryTitle;
                manga.PrimaryTitle = originalTitle;
                var result = await MetadataChanger.ChangeMangaTitle(manga, newTitle, addOldTitleToOtherTitles);
                if (result is not RenameResult.Ok)
                {
                    Snackbar.Add("Failed to change manga title.", Severity.Error);
                    return;
                }
            }

            await DbContext.SaveChangesAsync();

            Snackbar.Add("Manga updated successfully.", Severity.Success);
            NavigationManager.NavigateTo("/mangas");
        }
        catch (Exception e)
        {
            Snackbar.Add($"Error: {e.Message}", Severity.Error);
            Logger.LogError(e, "Error saving manga {MangaId}", manga.Id);
        }
    }

}
