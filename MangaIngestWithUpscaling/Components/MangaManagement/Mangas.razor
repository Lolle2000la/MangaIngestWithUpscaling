@page "/mangas"
@using System.Web
@using MangaIngestWithUpscaling.Data.LibraryManagement
@using MangaIngestWithUpscaling.Services.BackgroundTaskQueue
@using MangaIngestWithUpscaling.Services.BackgroundTaskQueue.Tasks
@using MangaIngestWithUpscaling.Services.MetadataHandling
@implements IDisposable

@inject ApplicationDbContext DbContext
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IMangaMetadataChanger MangaMetadataChanger
@inject ITaskQueue TaskQueue
@inject ISnackbar Snackbar
@inject ILogger<Mangas> Logger

<PageTitle>Browse and Manage Mangas</PageTitle>

<MudTable T="Manga" ServerData="@GetMangas"
          Hover="true" MultiSelection="true"
          SelectOnRowClick="false"
          CanCancelEdit="true"
          RowEditPreview="@BackupBeforeEdit"
          RowEditCancel="@RestoreOnCancel"
          RowEditCommit="async o => await OnCommitEdit(o)"
          @bind-SelectedItems="selectedMangas"
          @ref="table">
    <ToolBarContent>
        <MudGrid>
            <MudItem xs="12" sm="6" lg="6">
                <MudText Typo="Typo.h4">Mangas</MudText>
            </MudItem>
            <MudItem xs="12" sm="6" lg="3">
                <MudSelect Label="Library to browse" T="Library?"
                           @bind-Value="selectedLibrary"
                           @bind-Value:after="async () => await table.ReloadServerData()">
                    <MudSelectItem T="Library?" Value="null">All</MudSelectItem>
                    @foreach (var library in DbContext.Libraries)
                    {
                        <MudSelectItem T="Library?" Value="@library">@library.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="12" lg="3">
                <MudTextField Label="Search by title." Placeholder="Search..." Variant="Variant.Outlined"
                              @bind-Value="SearchString"
                              @bind-Value:after="async () => await table.ReloadServerData()"
                              Immediate="true"
                              OnInternalInputChanged="async () => await table.ReloadServerData()"/>
            </MudItem>
            <MudItem xs="12">
                <MudStack Row="true">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Merge"
                               Disabled="@(selectedMangas == null || selectedMangas.Count < 2)"
                               OnClick="OnMergeSelected">Merge Selected
                    </MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary"
                               StartIcon="@Icons.Material.Filled.Shuffle"
                               Disabled="selectedMangas == null || selectedMangas.Count == 0"
                               OnClick="OnMoveSelectedToNewLibrary">Move Selected to New Library
                    </MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Error"
                               OnClick="OnDeleteSelected"
                               StartIcon="@Icons.Material.Filled.DeleteSweep"
                               Disabled="@(selectedMangas == null || selectedMangas.Count == 0)">Delete Selected
                    </MudButton>
                </MudStack>
            </MudItem>
        </MudGrid>

    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel T="Manga" SortLabel="library_field">
                Library
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="Manga" SortLabel="title_field"
                               InitialDirection="SortDirection.Ascending">
                Title
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="Manga" SortLabel="chapters_field"
                               InitialDirection="SortDirection.Descending">
                Chapters
            </MudTableSortLabel>
        </MudTh>
        <MudTh>Should Upscale</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Library">@context.Library.Name</MudTd>
        <MudTd DataLabel="Primary title">@context.PrimaryTitle</MudTd>
        <MudTd
            DataLabel="Chapter count">@context.Chapters.Count() (@context.Chapters.Count(c => c.IsUpscaled) upscaled)
        </MudTd>
        <MudTd
            DataLabel="Should upscale">@(context.ShouldUpscale is not null ? context.ShouldUpscale.Value : "Use Library settings")</MudTd>
        <MudTd>
            <a href="mangas/@context.Id" title="Edit this Manga.">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Text"
                               Size="Size.Small"/>
            </a>
            <MudIconButton Icon="@Icons.Material.Filled.ImageAspectRatio" Variant="Variant.Text"
                           Size="Size.Small"
                           title="Upscale chapter in this manga. This will upscale all chapters that aren't yet or used a different one from the one configured."
                           OnClick="_ => OnUpscaleSpecific(context)"/>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Text"
                           OnClick="_ => OnDeleteSpecific(context)"
                           title="Delete this Manga."
                           Size="Size.Small"/>
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Library">@context.Library.Name</MudTd>
        <MudTd DataLabel="Primary title">
            <MudTextField @bind-Value="context.PrimaryTitle" Required/>
        </MudTd>
        <MudTd
            DataLabel="Chapter count">@context.Chapters.Count() (@context.Chapters.Count(c => c.IsUpscaled) upscaled)
        </MudTd>
        <MudTd DataLabel="Should upscale">
            <MudCheckBox T="bool?" TriState="true" @bind-Value="context.ShouldUpscale"/>
        </MudTd>

    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>

@code {
    private Library? selectedLibrary;


    [Parameter]
    [SupplyParameterFromQuery(Name = "search")]
    public string SearchString { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery(Name = "page")]
    public int? PageNumber { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "pageSize")]
    public int? PageSizeValue { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "sortBy")]
    public string? SortByColumn { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "sortDir")]
    public string? SortDirectionValue { get; set; }

    private HashSet<Manga> selectedMangas = new();

    private MudTable<Manga> table = default!;

    private Manga? mangaBeforeEdit;

    private CompositeDisposable disposables = new();

    private async Task<TableData<Manga>> GetMangas(TableState state, CancellationToken cancellationToken)
    {
        var query = DbContext.MangaSeries
            .Include(x => x.Library)
            .ThenInclude(x => x.UpscalerProfile)
            .Include(x => x.Chapters)
            .Include(x => x.UpscalerProfilePreference)
            .AsQueryable();

        if (selectedLibrary != null)
        {
            query = query.Where(x => x.LibraryId == selectedLibrary.Id);
        }

        if (!string.IsNullOrWhiteSpace(SearchString))
        {
            string trimmedSearchString = SearchString.Trim();
            query = query.Where(x => x.PrimaryTitle.ToLower().Contains(trimmedSearchString.ToLower()) || x.OtherTitles.Any(s => s.Title.ToLower().Contains(trimmedSearchString.ToLower())));
        }

        query = state.SortLabel switch
        {
            "library_field" => query.OrderByDirection(state.SortDirection, x => x.Library.Name),
            "title_field" => query.OrderByDirection(state.SortDirection, x => x.PrimaryTitle),
            "chapters_field" => query.OrderByDirection(state.SortDirection, x => x.Chapters.Count()),
            _ => query
        };

        this.WhenAnyValue(x => x.SearchString)
            .Throttle(TimeSpan.FromMilliseconds(250))
            .Where(s => HttpUtility.ParseQueryString(new Uri(NavigationManager.Uri).Query).Get("search") != s)
            .Subscribe(s =>
            {
                string newUrl = NavigationManager.GetUriWithQueryParameter("search", s);
                NavigationManager.NavigateTo(newUrl, forceLoad: false, replace: true);
            })
            .DisposeWith(disposables);

        UpdateQueryParameters(state);

        try
        {
            var totalItems = await query.CountAsync(cancellationToken: cancellationToken);
            var items = await query.Skip(state.Page * state.PageSize).Take(state.PageSize).ToListAsync(cancellationToken);
            return new TableData<Manga> { Items = items, TotalItems = totalItems };
        }
        catch (Exception e)
        {
            Snackbar.Add($"Error: {e.Message}", Severity.Error);
            Logger.LogError(e, "Error loading mangas.");
            return new TableData<Manga> { Items = new List<Manga>(), TotalItems = 0 };
        }
    }

    private void UpdateQueryParameters(TableState state)
    {
        var queryParams = HttpUtility.ParseQueryString(new Uri(NavigationManager.Uri).Query);
        
        bool needsUpdate = false;
        
        if (queryParams.Get("page") != state.Page.ToString())
        {
            needsUpdate = true;
        }
        if (queryParams.Get("pageSize") != state.PageSize.ToString())
        {
            needsUpdate = true;
        }
        if (queryParams.Get("sortBy") != state.SortLabel)
        {
            needsUpdate = true;
        }
        if (queryParams.Get("sortDir") != state.SortDirection.ToString())
        {
            needsUpdate = true;
        }

        if (needsUpdate)
        {
            var newUrl = NavigationManager.GetUriWithQueryParameters(new Dictionary<string, object?>
            {
                ["page"] = state.Page,
                ["pageSize"] = state.PageSize,
                ["sortBy"] = state.SortLabel,
                ["sortDir"] = state.SortDirection.ToString()
            });
            NavigationManager.NavigateTo(newUrl, forceLoad: false, replace: true);
        }
    }

    private async Task OnMergeSelected()
    {
        if (selectedMangas == null || !selectedMangas.Any()) return;
        var parameters = new DialogParameters<MergeMangaDialog>
        {
            { x => x.Mangas, selectedMangas.ToList() }
        };

        try
        {
            var dialog = await DialogService.ShowAsync<MergeMangaDialog>("Merge Mangas", parameters);
            var result = await dialog.Result;

            if (result is { Canceled: false })
            {
                await table.ReloadServerData();
            }
        }
        catch (Exception e)
        {
            Snackbar.Add($"Error: {e.Message}", Severity.Error);
            Logger.LogError(e, "Error merging mangas.");
            await table.ReloadServerData();
        }
    }

    private async Task OnMoveSelectedToNewLibrary()
    {
        if (!selectedMangas.Any()) return;
        var parameters = new DialogParameters<MoveMangasToLibraryDialog>
        {
            { x => x.Mangas, selectedMangas.ToList() }
        };
        try
        {
            var dialog = await DialogService.ShowAsync<MoveMangasToLibraryDialog>("Move Mangas", parameters);
            var result = await dialog.Result;
            if (result is { Canceled: false })
            {
                await table.ReloadServerData();
            }
        }
        catch (Exception e)
        {
            Snackbar.Add($"Error: {e.Message}", Severity.Error);
            Logger.LogError(e, "Error moving mangas to new library.");
            await table.ReloadServerData();
        }
    }

    private async Task OnDeleteSelected()
    {
        if (!selectedMangas.Any()) return;
        var parameters = new DialogParameters<DeleteMangasDialog>
        {
            { x => x.Mangas, selectedMangas }
        };

        try
        {
            var dialog = await DialogService.ShowAsync<DeleteMangasDialog>("Delete Mangas", parameters);
            var result = await dialog.Result;

            if (result is { Canceled: false })
            {
                await table.ReloadServerData();
            }
        }
        catch (Exception e)
        {
            Snackbar.Add($"Error: {e.Message}", Severity.Error);
            Logger.LogError(e, "Error deleting mangas.");
            await table.ReloadServerData();
        }
    }

    private async Task OnDeleteSpecific(Manga manga)
    {
        try
        {
            var dialog = await DialogService.ShowAsync<DeleteMangasDialog>("Delete Manga", new DialogParameters<DeleteMangasDialog>
            {
                { x => x.Mangas, new List<Manga> { manga } }
            });
            var result = await dialog.Result;
            if (result is { Canceled: false })
            {
                await table.ReloadServerData();
            }
        }
        catch (Exception e)
        {
            Snackbar.Add($"Error: {e.Message}", Severity.Error);
            Logger.LogError(e, "Error deleting manga {MangaId}", manga.Id);
            await table.ReloadServerData();
        }
    }

    private async Task OnUpscaleSpecific(Manga manga)
    {
        if (manga.EffectiveUpscalerProfile == null) return;
        foreach (var chapter in manga.Chapters
                     .Where(chapter => !chapter.IsUpscaled || (chapter.IsUpscaled && chapter.UpscalerProfileId != manga.Library.UpscalerProfileId)))
        {
            await TaskQueue.EnqueueAsync(new UpscaleTask(chapter));
        }
    }

    private void BackupBeforeEdit(object manga)
    {
        mangaBeforeEdit = ((Manga)manga).Clone();
    }

    private void RestoreOnCancel(object manga)
    {
        if (mangaBeforeEdit == null) return;
        var mangaToRestore = (Manga)manga;
        mangaToRestore.PrimaryTitle = mangaBeforeEdit.PrimaryTitle;
        mangaToRestore.LibraryId = mangaBeforeEdit.LibraryId;
        mangaToRestore.ShouldUpscale = mangaBeforeEdit.ShouldUpscale;
    }

    private async Task OnCommitEdit(object m)
    {
        Manga manga = (Manga)m;
        if (mangaBeforeEdit == null) return;
        // if the primary title was changed, change it back and then use the metadata changer.
        if (manga.PrimaryTitle != mangaBeforeEdit.PrimaryTitle)
        {
            await DbContext.Entry(manga).Collection(x => x.OtherTitles).LoadAsync();
            var newTitle = manga.PrimaryTitle;
            manga.PrimaryTitle = mangaBeforeEdit.PrimaryTitle;
            try
            {
                var renameResult = await MangaMetadataChanger.ChangeMangaTitle(manga, newTitle.Trim());
                if (renameResult is not RenameResult.Ok)
                {
                    await table.ReloadServerData();
                    return;
                }
            }
            catch (Exception e)
            {
                Snackbar.Add($"Error: {e.Message}", Severity.Error);
                Logger.LogError(e, "Error changing title of manga {MangaId} to {NewTitle}", manga.Id, newTitle);
            }
        }

        try
        {
            await DbContext.SaveChangesAsync();
        }
        catch (Exception e)
        {
            Snackbar.Add($"Error: {e.Message}", Severity.Error);
            Logger.LogError(e, "Error saving changes to manga {MangaId}", manga.Id);
        }
    }

    public void Dispose()
    {
        disposables.Dispose();
    }

}
