@page "/mangas"
@using MangaIngestWithUpscaling.Data.LibraryManagement
@using MangaIngestWithUpscaling.Services.MetadataHandling

@inject ApplicationDbContext DbContext
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IMangaMetadataChanger MangaMetadataChanger

<PageTitle>Browse and Manage Mangas</PageTitle>

<MudTable T="Manga" ServerData="GetMangas"
Hover="true" MultiSelection="true"
SelectOnRowClick="false"
CanCancelEdit="true"
RowEditPreview="BackupBeforeEdit"
RowEditCancel="RestoreOnCancel"
RowEditCommit="async o => await OnCommitEdit(o)"
@bind-SelectedItems="selectedMangas"
@ref="table">
    <ToolBarContent>
        <MudGrid>
            <MudItem xs="12" sm="6" lg="6">
                <MudText Typo="Typo.h4">Mangas</MudText>
            </MudItem>
            <MudItem xs="12" sm="6" lg="3">
                <MudSelect Label="Library to browse" T="Library?"
                @bind-Value="selectedLibrary"
                @bind-Value:after="async () => await table.ReloadServerData()">
                    <MudSelectItem T="Library?" Value="null">All</MudSelectItem>
                    @foreach (var library in DbContext.Libraries)
                    {
                        <MudSelectItem T="Library?" Value="@library">@library.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="12" lg="3">
                <MudTextField Label="Search by title." Placeholder="Search..." Variant="Variant.Outlined"
                @bind-Value="searchString"
                @bind-Value:after="async () => await table.ReloadServerData()"
                Immediate="true"
                OnInternalInputChanged="async () => await table.ReloadServerData()" />
            </MudItem>
            <MudItem xs="12">
                <MudStack Row="true">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary"
                    StartIcon="@Icons.Material.Filled.Merge"
                    Disabled="@(selectedMangas == null || selectedMangas.Count < 2)"
                    OnClick="OnMergeSelected">Merge Selected</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Error"
                    OnClick="OnDeleteSelected"
                    StartIcon="@Icons.Material.Filled.DeleteSweep"
                    Disabled="@(selectedMangas == null || selectedMangas.Count == 0)">Delete Selected</MudButton>
                </MudStack>
            </MudItem>
        </MudGrid>

    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel T="Manga" SortLabel="library_field">
                Library
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="Manga" SortLabel="title_field"
            InitialDirection="SortDirection.Ascending">
                Title
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="Manga" SortLabel="chapters_field"
            InitialDirection="SortDirection.Descending">
                Chapters
            </MudTableSortLabel>
        </MudTh>
        <MudTh>Should Upscale</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Library">@context.Library.Name</MudTd>
        <MudTd DataLabel="Primary title">@context.PrimaryTitle</MudTd>
        <MudTd DataLabel="Chapter count">@context.Chapters.Count()</MudTd>
        <MudTd DataLabel="Should upscale">@(context.ShouldUpscale.HasValue ? context.ShouldUpscale.Value : "Use Library settings")</MudTd>
        <MudTd>
            <a href="mangas/@context.Id">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Text"
                Size="Size.Small" />
            </a>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Text"
            OnClick="_ => OnDeleteSpecific(context)"
            Size="Size.Small" />
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Library">@context.Library.Name</MudTd>
        <MudTd DataLabel="Primary title"><MudTextField @bind-Value="context.PrimaryTitle" Required /></MudTd>
        <MudTd DataLabel="Chapter count">@context.Chapters.Count()</MudTd>
        <MudTd DataLabel="Should upscale">
            <MudCheckBox T="bool?" TriState="true" @bind-Value="context.ShouldUpscale" />
        </MudTd>

    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@if (exception != null)
{
    <MudAlert Severity="Severity.Error">@exception.Message</MudAlert>
}

@code {
    private Library? selectedLibrary;
    private string searchString = "";

    private HashSet<Manga>? selectedMangas;

    private MudTable<Manga> table;

    private Manga? mangaBeforeEdit;

    private Exception? exception;

    private async Task<TableData<Manga>> GetMangas(TableState state, CancellationToken cancellationToken)
    {
        var query = DbContext.MangaSeries
            .Include(x => x.Library)
            .Include(x => x.Chapters)
            .AsQueryable();

        if (selectedLibrary != null)
        {
            query = query.Where(x => x.LibraryId == selectedLibrary.Id);
        }

        if (!string.IsNullOrWhiteSpace(searchString))
        {
            query = query.Where(x => x.PrimaryTitle.Contains(searchString) || x.OtherTitles.Any(s => s.Title == searchString));
        }

        query = state.SortLabel switch
        {
            "library_field" => query.OrderByDirection(state.SortDirection, x => x.Library.Name),
            "title_field" => query.OrderByDirection(state.SortDirection, x => x.PrimaryTitle),
            "chapters_field" => query.OrderByDirection(state.SortDirection, x => x.Chapters.Count()),
            _ => query
        };

        try
        {
            var totalItems = await query.CountAsync();
            var items = await query.Skip(state.Page * state.PageSize).Take(state.PageSize).ToListAsync(cancellationToken);
            return new TableData<Manga> { Items = items, TotalItems = totalItems };
        }
        catch (Exception e)
        {
            exception = e;
            return new TableData<Manga> { Items = new List<Manga>(), TotalItems = 0 };
        }
    }

    private async Task OnMergeSelected()
    {
        var parameters = new DialogParameters<MergeMangaDialog>
        {
            { x=> x.Mangas, selectedMangas.ToList() }
        };

        var dialog = await DialogService.ShowAsync<MergeMangaDialog>("Merge Mangas", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await table.ReloadServerData();
        }
    }

    private async Task OnDeleteSelected()
    {
        var parameters = new DialogParameters<DeleteMangasDialog>
        {
            { x=> x.Mangas, selectedMangas }
        };

        var dialog = await DialogService.ShowAsync<DeleteMangasDialog>("Delete Mangas", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await table.ReloadServerData();
        }
    }

    private async Task OnDeleteSpecific(Manga manga)
    {
        var dialog = await DialogService.ShowAsync<DeleteMangasDialog>("Delete Manga", new DialogParameters<DeleteMangasDialog>
        {
            { x=> x.Mangas, new List<Manga> { manga } }
        });
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await table.ReloadServerData();
        }
    }

    private void BackupBeforeEdit(object manga)
    {
        mangaBeforeEdit = ((Manga)manga).Clone();
    }

    private void RestoreOnCancel(object manga)
    {
        var mangaToRestore = (Manga)manga;
        mangaToRestore.PrimaryTitle = mangaBeforeEdit.PrimaryTitle;
        mangaToRestore.LibraryId = mangaBeforeEdit.LibraryId;
        mangaToRestore.Library = mangaBeforeEdit.Library;
        mangaToRestore.ShouldUpscale = mangaBeforeEdit.ShouldUpscale;
    }

    private async Task OnCommitEdit(object m)
    {
        Manga manga = (Manga)m;
        // if the primary title was changed, change it back and then use the metadata changer.
        if (manga.PrimaryTitle != mangaBeforeEdit.PrimaryTitle)
        {
            await DbContext.Entry(manga).Collection(x => x.OtherTitles).LoadAsync();
            var newTitle = manga.PrimaryTitle;
            manga.PrimaryTitle = mangaBeforeEdit.PrimaryTitle;
            await MangaMetadataChanger.ChangeTitle(manga, newTitle.Trim());
        }

        DbContext.Update((Manga)manga);
        try
        {
            await DbContext.SaveChangesAsync();
        }
        catch (Exception e)
        {
            exception = e;
        }
    }
}
