@using System.Collections.ObjectModel
@using System.Text.RegularExpressions
@using DynamicData
@using MangaIngestWithUpscaling.Data.LibraryManagement
@using MangaIngestWithUpscaling.Helpers
@using MangaIngestWithUpscaling.Services.BackgroundTaskQueue
@using MangaIngestWithUpscaling.Services.BackgroundTaskQueue.Tasks
@using MangaIngestWithUpscaling.Services.ChapterMerging
@using MangaIngestWithUpscaling.Services.Integrations
@using MangaIngestWithUpscaling.Services.LibraryIntegrity
@using MangaIngestWithUpscaling.Services.MetadataHandling
@using MangaIngestWithUpscaling.Shared.Services.FileSystem
@using MangaIngestWithUpscaling.Shared.Services.MetadataHandling
@inject ApplicationDbContext DbContext
@inject IMetadataHandlingService MetadataHandler
@inject IMangaMetadataChanger MangaMetadataChanger
@inject ITaskQueue TaskQueue
@inject ILogger<ChapterList> Logger
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ILibraryIntegrityChecker LibraryIntegrityChecker
@inject IFileSystem FileSystem
@inject IChapterChangedNotifier ChapterChangedNotifier
@inject IChapterMergeRevertService ChapterMergeRevertService
@inject IChapterMergeCoordinator ChapterMergeCoordinator

<MudTable T="ChapterItem" @bind-SelectedItems="selectedChapters"
          Items="@chapterItems"
          Dense="true"
          MultiSelection="true"
          CanCancelEdit="true"
          RowEditCommit="r => _ = OnChapterMetadataCommit(r as ChapterItem)"
          RowEditCancel="r => OnChapterMetadataDiscard(r as ChapterItem)">
    <ToolBarContent>
        <MudStack Row>
            <MudButton StartIcon="@Icons.Material.Filled.Delete"
                       Color="Color.Error"
                       Variant="Variant.Text"
                       Disabled="selectedChapters.Count == 0"
                       OnClick="@(async () => await DeleteSelected())">
                Delete Selected
            </MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.ArrowUpward"
                       Color="Color.Primary"
                       Variant="Variant.Text"
                       Disabled="selectedChapters.Count == 0 || selectedChapters.All(c => c.Chapter.IsUpscaled)"
                       OnClick="@UpscaleSelectedChapters">
                Upscale Selected
            </MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.ArrowDownward"
                       Color="Color.Secondary"
                       Variant="Variant.Text"
                       Disabled="selectedChapters.Count == 0 || !selectedChapters.Any(c => c.Chapter.IsUpscaled)"
                       OnClick="@DeleteSelectedUpscaled">
                Delete Upscaled Selected
            </MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.Undo"
                       Color="Color.Warning"
                       Variant="Variant.Text"
                       Disabled="selectedChapters.Count == 0 || !selectedChapters.Any(c => c.IsMerged)"
                       OnClick="@RevertSelectedMergedChapters">
                Revert Selected Merged (Experimental)
            </MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.MergeType"
                       Color="Color.Info"
                       Variant="Variant.Text"
                       Disabled="selectedChapters.Count == 0 || !CanAnySelectedBeMerged"
                       OnClick="@MergeSelectedChapters">
                Merge Selected / Add to Existing (Experimental)
            </MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.Refresh"
                       Color="Color.Warning"
                       Variant="Variant.Text"
                       Size="Size.Small"
                       OnClick="@ForceUpdateMergePossibilitiesAsync">
                DEBUG: Refresh Merge Cache
            </MudButton>
        </MudStack>
        <MudText Typo="Typo.caption" Color="Color.Secondary" Style="margin-top: 8px;">
            DEBUG: Merge Cache Status - 
            @if (_cachedMergePossibilities == null)
            {
                <span style="color: red;">Not Loaded</span>
            }
            else
            {
                <span style="color: green;">
                    Loaded (@((DateTime.UtcNow - _lastMergePossibilitiesUpdate).TotalSeconds.ToString("F1"))s ago) - 
                    New: @_cachedMergePossibilities.NewMergeGroups.Count, 
                    Additions: @_cachedMergePossibilities.AdditionsToExistingMerged.Count,
                    HasAny: @_cachedMergePossibilities.HasAnyMergePossibilities
                </span>
            }
        </MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Chapter Title</MudTh>
        <MudTh>Chapter Path</MudTh>
        <MudTh>Upscaled</MudTh>
        <MudTh>Upscaler Profile</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Chapter Title">
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                <MudText>@(context.ExtractedMetadata?.ChapterTitle ?? "N/A")</MudText>
                @if (context.IsMerged)
                {
                    <MudChip T="string" Size="Size.Small" Color="Color.Info" Variant="Variant.Filled">
                        <MudIcon Icon="@Icons.Material.Filled.CallMerge" Size="Size.Small"/>
                        Merged
                    </MudChip>
                }
            </MudStack>
        </MudTd>
        <MudTd DataLabel="Chapter Path">@context.Chapter.RelativePath</MudTd>
        <MudTd DataLabel="Upscaled">
            @context.Chapter.IsUpscaled
            @if (!context.Chapter.IsUpscaled)
            {
                <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward"
                               Color="Color.Primary" Variant="Variant.Text"
                               OnClick="@(() => UpscaleChapter(context.Chapter))"
                               title="Upscale this chapter."/>
            }
            else
            {
                <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward"
                               Color="Color.Secondary" Variant="Variant.Text"
                               OnClick="@(() => DeleteUpscaledConfirm(context.Chapter))"
                               title="Delete upscaled version of this chapter."/>
            }
        </MudTd>
        <MudTd DataLabel="Upscaler Profile">
            @(context.Chapter.UpscalerProfile?.Deleted == true ? $"{context.Chapter.UpscalerProfile.Name} (old)" : context.Chapter.UpscalerProfile?.Name)
        </MudTd>
        <MudTd DataLabel="Actions">
            <MudStack Row="true" Spacing="1">
                @if (context.IsMerged)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Undo"
                                   Color="Color.Warning" Variant="Variant.Text"
                                   OnClick="@(() => RevertMergedChapterConfirm(context.Chapter))"
                                   title="Revert this merged chapter back to individual parts"/>
                }
                @if (CanManualMergeChapterSync(context.Chapter))
                {
                    <MudIconButton Icon="@Icons.Material.Filled.MergeType"
                                   Color="Color.Info" Variant="Variant.Text"
                                   OnClick="@(() => MergeChapterConfirm(context.Chapter))"
                                   title="Merge this chapter with consecutive parts or add to existing merged chapter"/>
                }
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Color="Color.Error" Variant="Variant.Text"
                               OnClick="@(() => DeleteChapterConfirm(context.Chapter))"
                               title="Delete this chapter"/>
            </MudStack>
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Chapter Title">
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                <MudInput @bind-Value="context.NewTitle"/>
                @if (context.IsMerged)
                {
                    <MudChip T="string" Size="Size.Small" Color="Color.Info" Variant="Variant.Filled">
                        <MudIcon Icon="@Icons.Material.Filled.CallMerge" Size="Size.Small"/>
                        Merged
                    </MudChip>
                }
            </MudStack>
        </MudTd>
        <MudTd DataLabel="Chapter Path">
            <MudInput @bind-Value="context.NewFileName" Label="Filename" HelperText="Filename"/>
            .cbz
        </MudTd>
        <MudTd DataLabel="Upscaled">
            @context.Chapter.IsUpscaled
            @if (!context.Chapter.IsUpscaled)
            {
                <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward"
                               Color="Color.Primary" Variant="Variant.Text"
                               OnClick="@(() => UpscaleChapter(context.Chapter))"
                               title="Upscale this chapter."/>
            }
            else
            {
                <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward"
                               Color="Color.Secondary" Variant="Variant.Text"
                               OnClick="@(() => DeleteUpscaledConfirm(context.Chapter))"
                               title="Delete upscaled version of this chapter."/>
            }
        </MudTd>
        <MudTd DataLabel="Upscaler Profile">
            @(context.Chapter.UpscalerProfile?.Deleted == true ? $"{context.Chapter.UpscalerProfile.Name} (old)" : context.Chapter.UpscalerProfile?.Name)
        </MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>

@code {
    [Parameter] public required Manga Manga { get; set; }

    private ReadOnlyObservableCollection<ChapterItem> chapterItems = new([]);
    private SourceList<ChapterItem> chapters = new();

    private HashSet<ChapterItem> selectedChapters = new();


    private async Task DeleteSelected()
    {
        var result = await DialogService.ShowMessageBox("Delete Selected Chapters", "Are you sure you want to delete the selected chapters?", yesText: "Yes", cancelText: "No");
        if (result == true)
        {
            var chaptersToDelete = selectedChapters.ToList();
            foreach (var c in chaptersToDelete)
            {
                await DeleteChapter(c.Chapter);
            }
        }
    }

    private async Task UpscaleSelectedChapters()
    {
        var chaptersToUpscale = selectedChapters.Where(c => !c.Chapter.IsUpscaled).ToList();
        foreach (var c in chaptersToUpscale)
        {
            await UpscaleChapter(c.Chapter);
        }
    }

    private async Task DeleteSelectedUpscaled()
    {
        var result = await DialogService.ShowMessageBox("Delete Upscaled Selected Chapters", "Are you sure you want to delete the upscaled versions of the selected chapters?", "Yes", cancelText: "No");
        if (result == true)
        {
            var chaptersToProcess = selectedChapters.ToList();
            foreach (var c in chaptersToProcess)
            {
                await DeleteUpscaled(c.Chapter);
            }
        }
    }

    private async Task RevertSelectedMergedChapters()
    {
        // Filter to only merged chapters from the selection
        var mergedChapters = selectedChapters.Where(c => c.IsMerged).ToList();

        if (!mergedChapters.Any())
        {
            Snackbar.Add("No merged chapters selected for reversion.", Severity.Warning);
            return;
        }

        var result = await DialogService.ShowMessageBox(
            "Revert Selected Merged Chapters",
            $"Are you sure you want to revert {mergedChapters.Count} merged chapters back to their original parts? This will delete the merged chapters and restore the individual parts.",
            "Yes",
            cancelText: "No");

        if (result == true)
        {
            int successCount = 0;
            int failureCount = 0;

            foreach (var chapterItem in mergedChapters)
            {
                try
                {
                    await RevertMergedChapter(chapterItem.Chapter);
                    successCount++;
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "Failed to revert merged chapter {ChapterId}", chapterItem.Chapter.Id);
                    failureCount++;
                }
            }

            if (successCount > 0)
            {
                Snackbar.Add($"Successfully reverted {successCount} merged chapters.", Severity.Success);
            }

            if (failureCount > 0)
            {
                Snackbar.Add($"Failed to revert {failureCount} merged chapters. Check the logs for more information.", Severity.Error);
            }
        }
    }

    private async Task DeleteChapterConfirm(Chapter chapter)
    {
        var result = await DialogService.ShowMessageBox("Delete Chapter", "Are you sure you want to delete this chapter?", yesText: "Yes", cancelText: "No");
        if (result == true)
        {
            await DeleteChapter(chapter);
        }
    }

    private async Task RevertMergedChapterConfirm(Chapter chapter)
    {
        var result = await DialogService.ShowMessageBox(
            "Revert Merged Chapter",
            "Are you sure you want to revert this merged chapter back to its original parts? This will delete the merged chapter and restore the individual parts.",
            "Yes",
            cancelText: "No");

        if (result == true)
        {
            await RevertMergedChapter(chapter);
        }
    }

    private async Task RevertMergedChapter(Chapter chapter)
    {
        try
        {
            var restoredChapters = await ChapterMergeRevertService.RevertMergedChapterAsync(chapter);

            // Remove the merged chapter from the UI
            var chapterItem = chapterItems.FirstOrDefault(ci => ci.Chapter.Id == chapter.Id);
            if (chapterItem != null)
            {
                chapters.Remove(chapterItem);
            }

            // Add the restored chapters to the UI
            foreach (var restoredChapter in restoredChapters)
            {
                var extractedMetadata = MetadataHandler.GetSeriesAndTitleFromComicInfo(
                    Path.Combine(Manga.Library.NotUpscaledLibraryPath, restoredChapter.RelativePath));

                chapters.Add(new ChapterItem
                {
                    Chapter = restoredChapter,
                    ExtractedMetadata = extractedMetadata,
                    NewTitle = extractedMetadata?.ChapterTitle ?? string.Empty,
                    NewFileName = Path.GetFileNameWithoutExtension(restoredChapter.FileName),
                    IsMerged = false // Restored chapters are not merged
                });

                try
                {
                    await ChapterChangedNotifier.Notify(restoredChapter, false);
                    if (restoredChapter.IsUpscaled)
                    {
                        await ChapterChangedNotifier.Notify(restoredChapter, true);
                    }
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "Failed to notify connected service of chapter change for merged chapter {ChapterId}", restoredChapter.Id);
                    Snackbar.Add($"Failed to notify connected service of chapter change for {restoredChapter.FileName}. Check the logs for more information.", Severity.Error);
                }
            }

            // Invalidate merge possibilities cache since chapters changed
            InvalidateMergePossibilitiesCache();

            Snackbar.Add($"Successfully reverted merged chapter and restored {restoredChapters.Count} individual parts.", Severity.Success);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to revert merged chapter {ChapterId}", chapter.Id);
            Snackbar.Add("Failed to revert merged chapter. Check the logs for more information.", Severity.Error);
        }
    }

    private async Task OnChapterMetadataCommit(ChapterItem? chapter)
    {
        if (chapter == null) return;

        if (chapter.ExtractedMetadata?.ChapterTitle != chapter.NewTitle)
        {
            await MangaMetadataChanger.ChangeChapterTitle(chapter.Chapter, chapter.NewTitle);
            if (chapter.ExtractedMetadata != null)
            {
                chapter.ExtractedMetadata = chapter.ExtractedMetadata with { ChapterTitle = chapter.NewTitle };
            }
        }

        if (Path.GetFileNameWithoutExtension(chapter.Chapter.FileName) != chapter.NewFileName)
        {
            if (!await RenameChapterFile(chapter.Chapter, chapter.NewFileName + ".cbz"))
            {
                chapter.NewFileName = Path.GetFileNameWithoutExtension(chapter.Chapter.FileName);
            }
        }
    }

    private void OnChapterMetadataDiscard(ChapterItem? chapter)
    {
        if (chapter == null) return;

        chapter.NewTitle = chapter.ExtractedMetadata?.ChapterTitle ?? string.Empty;
        chapter.NewFileName = Path.GetFileNameWithoutExtension(chapter.Chapter.FileName);
    }

    private async Task DeleteChapter(Chapter chapter)
    {
        await DeleteUpscaled(chapter);

        string toDelete = Path.Combine(Manga.Library.NotUpscaledLibraryPath, chapter.RelativePath);

        if (!File.Exists(toDelete))
        {
            return;
        }

        try
        {
            File.Delete(toDelete);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Failed to delete file of Chapter {ChapterId}", chapter.Id);
            Snackbar.Add($"Failed to delete {chapter.FileName}. Check the logs for more information.", Severity.Error);
        }

        DbContext.Remove(chapter);

        await DbContext.SaveChangesAsync();

        chapters.Remove(chapterItems.First(ci => ci.Chapter == chapter));
        
        // Invalidate merge possibilities cache since chapters changed
        InvalidateMergePossibilitiesCache();
    }

    private async Task UpscaleChapter(Chapter chapter)
    {
        if (chapter.IsUpscaled)
        {
            return;
        }

        if (!DbContext.Entry(Manga.Library).Reference(l => l.UpscalerProfile).IsLoaded)
        {
            await DbContext.Entry(Manga.Library).Reference(l => l.UpscalerProfile).LoadAsync();
        }

        if (!DbContext.Entry(Manga).Reference(m => m.UpscalerProfilePreference).IsLoaded)
        {
            await DbContext.Entry(Manga).Reference(m => m.UpscalerProfilePreference).LoadAsync();
        }

        if (Manga.EffectiveUpscalerProfile == null)
        {
            Snackbar.Add("Upscaler profile not set for this library/manga.", Severity.Error);
            return;
        }

        await TaskQueue.EnqueueAsync(
            new UpscaleTask(chapter));
    }

    private async Task DeleteUpscaledConfirm(Chapter chapter)
    {
        var result = await DialogService.ShowMessageBox("Delete Upscaled Chapter", "Are you sure you want to delete the upscaled version of this chapter?", yesText: "Yes", cancelText: "No");
        if (result == true)
        {
            await DeleteUpscaled(chapter);
        }
    }

    private async Task DeleteUpscaled(Chapter chapter)
    {
        if (!chapter.IsUpscaled)
        {
            return;
        }

        if (string.IsNullOrEmpty(Manga.Library.UpscaledLibraryPath))
        {
            Snackbar.Add("Upscaled library path not set for this library.", Severity.Error);
            return;
        }

        string toDelete = Path.Combine(Manga.Library.UpscaledLibraryPath, chapter.RelativePath);
        if (!File.Exists(toDelete))
        {
            return;
        }

        try
        {
            File.Delete(toDelete);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Failed to delete upscaled file of Chapter {ChapterId}", chapter.Id);
            Snackbar.Add($"Failed to delete upscaled {chapter.FileName}. Check the logs for more information.", Severity.Error);
        }

        chapter.IsUpscaled = false;

        await DbContext.SaveChangesAsync();
    }

    private async Task<bool> RenameChapterFile(Chapter chapter, string newFileName)
    {
        // Check if the new name contains invalid characters
        if (newFileName.IndexOfAny(Path.GetInvalidFileNameChars()) >= 0)
        {
            Snackbar.Add("The new name contains invalid characters.", Severity.Error);
            return false;
        }

        if (Manga?.Library == null) // Ensure Manga and Library are not null
        {
            Snackbar.Add("Manga or Library information is missing.", Severity.Error);
            return false;
        }

        if (string.IsNullOrEmpty(Manga.Library.UpscaledLibraryPath) && chapter.IsUpscaled)
        {
            Snackbar.Add("Upscaled library path not set for this library, but chapter is upscaled.", Severity.Error);
            return false;
        }

        var mangaTitle = Manga.PrimaryTitle ?? "Unknown_Series";
        string oldPath = Path.Combine(chapter.Manga.Library.NotUpscaledLibraryPath, chapter.RelativePath);
        var targetRelativePath = Path.Combine(PathEscaper.EscapeFileName(mangaTitle), newFileName);
        string newPath = Path.Combine(chapter.Manga.Library.NotUpscaledLibraryPath, targetRelativePath);
        bool success = true;

        string? oldUpscaledPath = null;
        string? newUpscaledPath = null;

        try
        {
            FileSystem.Move(oldPath, newPath);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Failed to rename file of Chapter {ChapterId}", chapter.Id);
            Snackbar.Add($"Failed to rename {chapter.FileName}. Check the logs for more information.", Severity.Error);
            success = false;
        }

        if (chapter.IsUpscaled && Manga?.Library?.UpscaledLibraryPath != null)
        {
            oldUpscaledPath = Path.Combine(Manga.Library.UpscaledLibraryPath, chapter.RelativePath);
            newUpscaledPath = Path.Combine(Manga.Library.UpscaledLibraryPath, targetRelativePath);
            if (success)
            {
                try
                {
                    FileSystem.Move(oldUpscaledPath, newUpscaledPath);
                }
                catch (Exception e)
                {
                    Logger.LogError(e, "Failed to rename upscaled file of Chapter {ChapterId}", chapter.Id);
                    Snackbar.Add($"Failed to rename upscaled {chapter.FileName}. Check the logs for more information.", Severity.Error);
                    success = false;
                    // Try to revert the rename of the not upscaled file
                    FileSystem.Move(newPath, oldPath);
                }
            }
        }

        if (success)
        {
            chapter.RelativePath = targetRelativePath;
            chapter.FileName = newFileName;
            await DbContext.SaveChangesAsync();
            _ = ChapterChangedNotifier.Notify(chapter, false);
            if (chapter.IsUpscaled)
            {
                _ = ChapterChangedNotifier.Notify(chapter, true);
            }
        }
        else
        {
            if (File.Exists(newPath))
            {
                try
                {
                    FileSystem.Move(newPath, oldPath);
                }
                catch (Exception e)
                {
                    Logger.LogError(e, "Failed to revert rename of file of Chapter {ChapterId}", chapter.Id);
                    Snackbar.Add($"Failed to revert rename of {chapter.FileName}. Check the logs for more information.", Severity.Error);
                }
            }

            if (File.Exists(newUpscaledPath) && newUpscaledPath != null && oldUpscaledPath != null)
            {
                try
                {
                    FileSystem.Move(newUpscaledPath, oldUpscaledPath);
                }
                catch (Exception e)
                {
                    Logger.LogError(e, "Failed to revert rename of upscaled file of Chapter {ChapterId}", chapter.Id);
                    Snackbar.Add($"Failed to revert rename of upscaled {chapter.FileName}. Check the logs for more information.", Severity.Error);
                }
            }
        }

        return success;
    }

    protected override async Task OnInitializedAsync()
    {
        if (!DbContext.Entry(Manga).Collection(m => m.Chapters).IsLoaded)
        {
            await DbContext.Entry(Manga).Collection(m => m.Chapters).LoadAsync();
        }

        if (!DbContext.Entry(Manga).Reference(m => m.Library).IsLoaded)
        {
            await DbContext.Entry(Manga).Reference(m => m.Library).LoadAsync();
        }

        await LoadChapters();

        _ = Task.Run(async () => { return await LibraryIntegrityChecker.CheckIntegrity(Manga); }).ContinueWith(async t =>
        {
            if (t.IsFaulted)
            {
                Logger.LogError(t.Exception, "Error checking library integrity for Manga ID {MangaId}", Manga?.Id);
                return;
            }

            if (t.Result) // t.Result is the boolean from CheckIntegrity
            {
                await InvokeAsync(async () =>
                {
                    await LoadChapters();
                    InvalidateMergePossibilitiesCache();
                    await UpdateMergePossibilitiesAsync();
                    StateHasChanged();
                });
            }
        }, TaskScheduler.FromCurrentSynchronizationContext());

        chapters.Connect()
            .Sort(new NaturalSortComparer<ChapterItem>(ci => ci.ExtractedMetadata?.ChapterTitle ?? string.Empty))
            .Bind(out chapterItems)
            .Subscribe();
    }

    private async Task<bool> LoadChapters()
    {
        bool loadingFailed = false;
        chapters.Clear();
        if (Manga.Chapters == null)
        {
            Logger.LogWarning("Chapters is null in LoadChapters for Manga ID {MangaId}.", Manga.Id);
            return true;
        }

        foreach (var chapter in Manga.Chapters.ToList()) // ToList() を追加して、コレクションの変更を許可します
        {
            var loadProfile = Task.FromResult(chapter.UpscalerProfile);
            if (chapter.UpscalerProfileId is not null && chapter.UpscalerProfile is null)
            {
                // The following is used to ignore soft deleted profiles
                loadProfile = DbContext.UpscalerProfiles.IgnoreQueryFilters()
                    .FirstOrDefaultAsync(p => p.Id == chapter.UpscalerProfileId);
            }

            try
            {
                if (Manga.Library?.NotUpscaledLibraryPath == null)
                {
                    loadingFailed = true;
                    continue;
                }

                if (string.IsNullOrEmpty(chapter.RelativePath))
                {
                    Logger.LogWarning("Chapter {ChapterId} has null or empty RelativePath.", chapter.Id);
                    loadingFailed = true;
                    continue;
                }

                var extractedMetadata = MetadataHandler.GetSeriesAndTitleFromComicInfo(Path.Combine(Manga.Library.NotUpscaledLibraryPath, chapter.RelativePath));
                chapter.UpscalerProfile = await loadProfile;

                // Check if this chapter is a merged chapter
                var isMerged = await ChapterMergeRevertService.CanRevertChapterAsync(chapter);

                chapters.Add(new ChapterItem
                {
                    Chapter = chapter,
                    ExtractedMetadata = extractedMetadata,
                    NewTitle = extractedMetadata?.ChapterTitle ?? string.Empty,
                    NewFileName = Path.GetFileNameWithoutExtension(chapter.FileName),
                    IsMerged = isMerged
                });
            }
            catch (Exception e)
            {
                Logger.LogError(e, "Failed to load metadata for Chapter {ChapterId}", chapter.Id);
                Snackbar.Add($"Failed to load metadata for {chapter.FileName}. Check the logs for more information.", Severity.Error);
                loadingFailed = true;
                continue;
            }
        }

        // Update merge possibilities cache after loading chapters
        _ = UpdateMergePossibilitiesAsync().ContinueWith(_ => 
        {
            InvokeAsync(StateHasChanged);
        }, TaskScheduler.FromCurrentSynchronizationContext());

        return loadingFailed;
    }

    // Manual merge functionality
    private bool CanAnySelectedBeMerged
    {
        get
        {
            // Use cached merge possibilities if available
            return _cachedMergePossibilities?.HasAnyMergePossibilities == true;
        }
    }

    private bool CanManualMergeSelected => selectedChapters.Any() && !selectedChapters.Any(c => c.IsMerged);

    private bool CanManualMergeChapterSync(Chapter chapter)
    {
        // Check cached possibilities for this specific chapter
        if (_cachedMergePossibilities == null)
            return false;

        // Check if this chapter can form new merge groups
        bool canFormNewMerge = _cachedMergePossibilities.NewMergeGroups.Values
            .Any(chapterList => chapterList.Any(c => c.Id == chapter.Id));

        // Check if this chapter can be added to existing merged chapters
        bool canAddToExisting = _cachedMergePossibilities.AdditionsToExistingMerged.Values
            .Any(chapterList => chapterList.Any(c => c.Id == chapter.Id));

        return canFormNewMerge || canAddToExisting;
    }

    // Cache for merge possibilities to avoid repeated async calls during UI rendering
    private MergeActionInfo? _cachedMergePossibilities;
    private DateTime _lastMergePossibilitiesUpdate = DateTime.MinValue;
    private readonly TimeSpan _mergePossibilitiesCacheTimeout = TimeSpan.FromSeconds(5); // Increased timeout for debugging

    private void InvalidateMergePossibilitiesCache()
    {
        _cachedMergePossibilities = null;
        _lastMergePossibilitiesUpdate = DateTime.MinValue;
        Logger.LogDebug("InvalidateMergePossibilitiesCache: Cache invalidated for manga {MangaId}", Manga?.Id);
    }

    private async Task ForceUpdateMergePossibilitiesAsync()
    {
        Logger.LogDebug("ForceUpdateMergePossibilitiesAsync: Forcing cache update for manga {MangaId}", Manga?.Id);
        InvalidateMergePossibilitiesCache();
        await UpdateMergePossibilitiesAsync();
        StateHasChanged();
    }

    private async Task UpdateMergePossibilitiesAsync()
    {
        if (DateTime.UtcNow - _lastMergePossibilitiesUpdate < _mergePossibilitiesCacheTimeout)
        {
            Logger.LogDebug("UpdateMergePossibilitiesAsync: Skipping update, cache still valid (age: {Age}ms)", 
                (DateTime.UtcNow - _lastMergePossibilitiesUpdate).TotalMilliseconds);
            return;
        }

        Logger.LogDebug("UpdateMergePossibilitiesAsync: Starting cache update for manga {MangaId}", Manga?.Id);

        try
        {
            var allChapters = chapterItems.Where(ci => !ci.IsMerged).Select(ci => ci.Chapter).ToList();
            Logger.LogDebug("UpdateMergePossibilitiesAsync: Found {ChapterCount} non-merged chapters: [{ChapterNames}]", 
                allChapters.Count, string.Join(", ", allChapters.Select(c => c.FileName)));
            
            if (allChapters.Any())
            {
                Logger.LogDebug("UpdateMergePossibilitiesAsync: Calling GetPossibleMergeActionsAsync with {ChapterCount} chapters", allChapters.Count);
                _cachedMergePossibilities = await ChapterMergeCoordinator.GetPossibleMergeActionsAsync(allChapters, includeLatestChapters: true);
                
                Logger.LogDebug("Updated merge possibilities cache: {NewMergeGroups} new merge groups, {AdditionsToExisting} additions to existing, HasAnyMergePossibilities: {HasAny}",
                    _cachedMergePossibilities.NewMergeGroups.Count, _cachedMergePossibilities.AdditionsToExistingMerged.Count, _cachedMergePossibilities.HasAnyMergePossibilities);
                
                // Log detailed merge group information
                foreach (var (baseNumber, chapterList) in _cachedMergePossibilities.NewMergeGroups)
                {
                    Logger.LogDebug("New merge group {BaseNumber}: [{ChapterNames}]", 
                        baseNumber, string.Join(", ", chapterList.Select(c => c.FileName)));
                }
                
                foreach (var (baseNumber, chapterList) in _cachedMergePossibilities.AdditionsToExistingMerged)
                {
                    Logger.LogDebug("Addition to existing merged {BaseNumber}: [{ChapterNames}]", 
                        baseNumber, string.Join(", ", chapterList.Select(c => c.FileName)));
                }
            }
            else
            {
                _cachedMergePossibilities = new MergeActionInfo();
                Logger.LogDebug("No non-merged chapters found, created empty merge possibilities cache");
            }
            _lastMergePossibilitiesUpdate = DateTime.UtcNow;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to update merge possibilities cache");
            _cachedMergePossibilities = new MergeActionInfo();
        }
    }

    private bool SharesSameBaseNumber(string fileName1, string fileName2)
    {
        // Simple heuristic: check if both have same numeric prefix
        var num1 = ExtractNumericPrefix(fileName1);
        var num2 = ExtractNumericPrefix(fileName2);
        return !string.IsNullOrEmpty(num1) && !string.IsNullOrEmpty(num2) && 
               Math.Floor(decimal.Parse(num1)) == Math.Floor(decimal.Parse(num2));
    }

    private string? ExtractNumericPrefix(string fileName)
    {
        var match = Regex.Match(fileName, @"(\d+(?:\.\d+)?)");
        return match.Success ? match.Groups[1].Value : null;
    }

    private async Task MergeSelectedChapters()
    {
        if (!selectedChapters.Any())
        {
            Snackbar.Add("No chapters selected.", Severity.Warning);
            return;
        }

        // Filter to only non-merged chapters from the selection
        var selectedChapterList = selectedChapters.Where(c => !c.IsMerged).Select(ci => ci.Chapter).ToList();

        if (!selectedChapterList.Any())
        {
            Snackbar.Add("No non-merged chapters selected for merging.", Severity.Warning);
            return;
        }
        
        // Get possible merge actions for the selected chapters
        var mergeActionsWithoutLatest = await ChapterMergeCoordinator.GetPossibleMergeActionsAsync(
            selectedChapterList, 
            includeLatestChapters: false);
            
        var mergeActionsWithLatest = await ChapterMergeCoordinator.GetPossibleMergeActionsAsync(
            selectedChapterList, 
            includeLatestChapters: true);

        if (!mergeActionsWithLatest.HasAnyMergePossibilities)
        {
            Snackbar.Add("No valid merge operations possible for the selected chapters.", Severity.Warning);
            return;
        }

        bool includeLatest = true;
        
        // If there's a difference, ask the user about latest chapters
        var totalActionsWithoutLatest = mergeActionsWithoutLatest.NewMergeGroups.Count + mergeActionsWithoutLatest.AdditionsToExistingMerged.Count;
        var totalActionsWithLatest = mergeActionsWithLatest.NewMergeGroups.Count + mergeActionsWithLatest.AdditionsToExistingMerged.Count;
        
        if (totalActionsWithLatest > totalActionsWithoutLatest)
        {
            var result = await DialogService.ShowMessageBox(
                "Latest Chapter Detected",
                "The selection includes operations involving the latest chapters. Do you want to proceed with all possible merge operations?",
                "Yes", "No");

            if (result != true)
                return;
        }

        await PerformMergeOperations(mergeActionsWithLatest, includeLatest);
    }

    private async Task MergeChapterConfirm(Chapter chapter)
    {
        // Get all chapters in the series to properly identify merge actions
        var allChapters = chapterItems.Where(ci => !ci.IsMerged).Select(ci => ci.Chapter).ToList();
        var mergeActions = await ChapterMergeCoordinator.GetPossibleMergeActionsAsync(
            allChapters, 
            includeLatestChapters: true);

        if (!mergeActions.HasAnyMergePossibilities)
        {
            Snackbar.Add("No merge operations possible for this chapter.", Severity.Warning);
            return;
        }

        // Find which merge action contains this chapter
        List<Chapter>? chaptersToMerge = null;
        string? mergeType = null;
        string? baseNumber = null;

        // Check if it's part of a new merge group
        foreach (var (baseNum, chapterList) in mergeActions.NewMergeGroups)
        {
            if (chapterList.Any(c => c.Id == chapter.Id))
            {
                chaptersToMerge = chapterList;
                mergeType = "new merge";
                baseNumber = baseNum;
                break;
            }
        }

        // Check if it can be added to an existing merged chapter
        if (chaptersToMerge == null)
        {
            foreach (var (baseNum, chapterList) in mergeActions.AdditionsToExistingMerged)
            {
                if (chapterList.Any(c => c.Id == chapter.Id))
                {
                    chaptersToMerge = chapterList;
                    mergeType = "addition to existing merged chapter";
                    baseNumber = baseNum;
                    break;
                }
            }
        }

        if (chaptersToMerge == null || baseNumber == null)
        {
            Snackbar.Add("The selected chapter is not part of any mergeable group.", Severity.Warning);
            return;
        }

        // Check if latest chapter is involved
        var mergeActionsWithoutLatest = await ChapterMergeCoordinator.GetPossibleMergeActionsAsync(
            chaptersToMerge, 
            includeLatestChapters: false);

        bool includeLatest = true;
        bool hasActionsWithoutLatest = mergeActionsWithoutLatest.NewMergeGroups.ContainsKey(baseNumber) || 
                                      mergeActionsWithoutLatest.AdditionsToExistingMerged.ContainsKey(baseNumber);

        if (!hasActionsWithoutLatest)
        {
            var result = await DialogService.ShowMessageBox(
                "Latest Chapter Detected",
                $"The {mergeType} for chapter {baseNumber} includes the latest chapter. Do you want to proceed?",
                "Yes", "No");

            if (result != true)
                return;
        }

        if (mergeType == "addition to existing merged chapter")
        {
            await PerformAdditionToExistingMerged(chaptersToMerge, baseNumber);
        }
        else
        {
            await PerformMergeOperation(chaptersToMerge, includeLatest);
        }
    }

    private async Task PerformMergeOperation(List<Chapter> chaptersToMerge, bool includeLatestChapters)
    {
        try
        {
            var completedMerges = await ChapterMergeCoordinator.MergeSelectedChaptersAsync(
                chaptersToMerge, 
                includeLatestChapters);

            if (!completedMerges.Any())
            {
                Snackbar.Add("No chapters were merged. Check the logs for more information.", Severity.Warning);
                return;
            }

            int totalProcessedChapters = 0;

            // Update UI: Remove original chapters and add merged chapters
            foreach (var mergeInfo in completedMerges)
            {
                // Find the chapters that were part of this merge based on the merge info
                var originalChapterIds = mergeInfo.OriginalParts.Select(op =>
                        chaptersToMerge.FirstOrDefault(c => c.FileName == op.FileName)?.Id)
                    .Where(id => id.HasValue)
                    .Select(id => id!.Value)
                    .ToHashSet();

                // Remove the original chapters from UI
                var itemsToRemove = chapterItems.Where(ci => originalChapterIds.Contains(ci.Chapter.Id)).ToList();
                foreach (var item in itemsToRemove)
                {
                    chapters.Remove(item);
                    totalProcessedChapters++;
                }

                // Find the merged chapter from the database - it should be one of the original chapters, updated
                var mergedChapterId = chaptersToMerge.FirstOrDefault(c => originalChapterIds.Contains(c.Id))?.Id;
                if (mergedChapterId.HasValue)
                {
                    var mergedChapter = await DbContext.Chapters.FindAsync(mergedChapterId.Value);
                    if (mergedChapter != null)
                    {
                        // Reload the chapter to get updated data
                        await DbContext.Entry(mergedChapter).ReloadAsync();

                        var extractedMetadata = MetadataHandler.GetSeriesAndTitleFromComicInfo(
                            Path.Combine(Manga.Library.NotUpscaledLibraryPath, mergedChapter.RelativePath));

                        chapters.Add(new ChapterItem
                        {
                            Chapter = mergedChapter,
                            ExtractedMetadata = extractedMetadata,
                            NewTitle = extractedMetadata?.ChapterTitle ?? string.Empty,
                            NewFileName = Path.GetFileNameWithoutExtension(mergedChapter.FileName),
                            IsMerged = true
                        });

                        try
                        {
                            await ChapterChangedNotifier.Notify(mergedChapter, false);
                            if (mergedChapter.IsUpscaled)
                            {
                                await ChapterChangedNotifier.Notify(mergedChapter, true);
                            }
                        }
                        catch (Exception ex)
                        {
                            Logger.LogError(ex, "Failed to notify connected service of chapter change for merged chapter {ChapterId}", mergedChapter.Id);
                            Snackbar.Add($"Failed to notify connected service of chapter change for {mergedChapter.FileName}. Check the logs for more information.", Severity.Error);
                        }
                    }
                }
            }

            var message = completedMerges.Count == 1
                ? $"Successfully merged {totalProcessedChapters} chapters into 1 group."
                : $"Successfully merged {totalProcessedChapters} chapters into {completedMerges.Count} groups.";

            Snackbar.Add(message, Severity.Success);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to perform manual merge operations");
            Snackbar.Add("Failed to merge chapters. Check the logs for more information.", Severity.Error);
        }
    }

    private async Task PerformMergeOperations(MergeActionInfo mergeActions, bool includeLatestChapters)
    {
        try
        {
            int totalNewMerges = 0;
            int totalAdditions = 0;

            // Handle new merges first
            foreach (var (baseNumber, chapterList) in mergeActions.NewMergeGroups)
            {
                await PerformMergeOperation(chapterList, includeLatestChapters);
                totalNewMerges++;
            }

            // Handle additions to existing merged chapters
            foreach (var (baseNumber, chapterList) in mergeActions.AdditionsToExistingMerged)
            {
                await PerformAdditionToExistingMerged(chapterList, baseNumber);
                totalAdditions++;
            }

            // Update merge possibilities cache
            await UpdateMergePossibilitiesAsync();

            var message = "";
            if (totalNewMerges > 0 && totalAdditions > 0)
            {
                message = $"Successfully completed {totalNewMerges} new merges and {totalAdditions} additions to existing merged chapters.";
            }
            else if (totalNewMerges > 0)
            {
                message = $"Successfully completed {totalNewMerges} new merges.";
            }
            else if (totalAdditions > 0)
            {
                message = $"Successfully completed {totalAdditions} additions to existing merged chapters.";
            }

            if (!string.IsNullOrEmpty(message))
            {
                Snackbar.Add(message, Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to perform merge operations");
            Snackbar.Add("Failed to complete merge operations. Check the logs for more information.", Severity.Error);
        }
    }

    private async Task PerformAdditionToExistingMerged(List<Chapter> chaptersToAdd, string baseNumber)
    {
        try
        {
            // Use the chapter merging coordinator to add chapters to existing merged chapter
            await ChapterMergeCoordinator.ProcessExistingChapterPartsForMergingAsync(Manga);

            // Remove the added chapters from UI since they're now part of the merged chapter
            foreach (var chapter in chaptersToAdd)
            {
                var chapterItem = chapterItems.FirstOrDefault(ci => ci.Chapter.Id == chapter.Id);
                if (chapterItem != null)
                {
                    chapters.Remove(chapterItem);
                }
            }

            // Find and update the merged chapter in the UI
            var mergedChapter = Manga.Chapters.FirstOrDefault(c => 
                chapterItems.Any(ci => ci.Chapter.Id == c.Id && ci.IsMerged) &&
                c.FileName.StartsWith(baseNumber + ".") || c.FileName == baseNumber + ".cbz");

            if (mergedChapter != null)
            {
                // Reload the merged chapter to get updated data
                await DbContext.Entry(mergedChapter).ReloadAsync();

                var existingItem = chapterItems.FirstOrDefault(ci => ci.Chapter.Id == mergedChapter.Id);
                if (existingItem != null)
                {
                    // Update the existing item
                    var extractedMetadata = MetadataHandler.GetSeriesAndTitleFromComicInfo(
                        Path.Combine(Manga.Library.NotUpscaledLibraryPath, mergedChapter.RelativePath));
                    
                    existingItem.ExtractedMetadata = extractedMetadata;
                    existingItem.NewTitle = extractedMetadata?.ChapterTitle ?? string.Empty;
                    existingItem.NewFileName = Path.GetFileNameWithoutExtension(mergedChapter.FileName);

                    try
                    {
                        await ChapterChangedNotifier.Notify(mergedChapter, false);
                        if (mergedChapter.IsUpscaled)
                        {
                            await ChapterChangedNotifier.Notify(mergedChapter, true);
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "Failed to notify connected service of chapter change for updated merged chapter {ChapterId}", mergedChapter.Id);
                        Snackbar.Add($"Failed to notify connected service of chapter change for {mergedChapter.FileName}. Check the logs for more information.", Severity.Error);
                    }
                }
            }

            Snackbar.Add($"Successfully added {chaptersToAdd.Count} chapters to existing merged chapter {baseNumber}.", Severity.Success);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to add chapters to existing merged chapter {BaseNumber}", baseNumber);
            Snackbar.Add($"Failed to add chapters to existing merged chapter {baseNumber}. Check the logs for more information.", Severity.Error);
        }
    }

    private record ChapterItem
    {
        public required Chapter Chapter { get; set; }
        public ExtractedMetadata? ExtractedMetadata { get; set; }
        public required string NewTitle { get; set; }
        public required string NewFileName { get; set; }
        public bool IsMerged { get; set; }
    }

}
