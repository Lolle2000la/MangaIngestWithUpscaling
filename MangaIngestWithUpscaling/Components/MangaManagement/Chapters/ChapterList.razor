@using DynamicData
@using MangaIngestWithUpscaling.Data.LibraryManagement
@using MangaIngestWithUpscaling.Helpers
@using MangaIngestWithUpscaling.Services.BackqroundTaskQueue
@using MangaIngestWithUpscaling.Services.BackqroundTaskQueue.Tasks
@using MangaIngestWithUpscaling.Services.LibraryIntegrity
@using MangaIngestWithUpscaling.Services.MetadataHandling
@using System.Collections.ObjectModel

@inject ApplicationDbContext DbContext
@inject IMetadataHandlingService MetadataHandler
@inject ITaskQueue TaskQueue
@inject ILogger<ChapterList> Logger
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ILibraryIntegrityChecker LibraryIntegrityChecker

<MudTable T="ChapterItem" @bind-SelectedItems="selectedChapters"
          Items="@chapterItems"
          Dense="true"
          MultiSelection="true">
    <ToolBarContent>
        <MudStack Row>
            <MudButton StartIcon="@Icons.Material.Filled.Delete"
                       Color="Color.Error"
                       Variant="Variant.Text"
                       Disabled="selectedChapters == null || selectedChapters.Count == 0"
                       OnClick="@(async () => await DeleteSelected())">
                Delete Selected
            </MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.ArrowUpward"
                       Color="Color.Primary"
                       Variant="Variant.Text"
                       Disabled="selectedChapters == null || selectedChapters.Count == 0 || !selectedChapters.Any(c => !c.Chapter.IsUpscaled)"
                       OnClick="@(() => selectedChapters?.Where(c => !c.Chapter.IsUpscaled).ToList().ForEach(async c => await UpscaleChapter(c.Chapter)))">
                Upscale Selected
            </MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.ArrowDownward"
                       Color="Color.Secondary"
                       Variant="Variant.Text"
                       Disabled="selectedChapters == null || selectedChapters.Count == 0 || !selectedChapters.Any(c => c.Chapter.IsUpscaled)"
                       OnClick="@(async () => await DeleteSelectedUpscaled())">
                Delete Upscaled Selected
            </MudButton>
        </MudStack>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Chapter Title</MudTh>
        <MudTh>Chapter Path</MudTh>
        <MudTh>Upscaled</MudTh>
        <MudTh>Upscaler Profile</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Chapter Title">@context.ExtractedMetadata.ChapterTitle</MudTd>
        <MudTd DataLabel="Chapter Path">@context.Chapter.RelativePath</MudTd>
        <MudTd DataLabel="Upscaled">
            @context.Chapter.IsUpscaled
            @if (!context.Chapter.IsUpscaled)
            {
                <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward"
                               Color="Color.Primary" Variant="Variant.Text"
                               OnClick="@(() => UpscaleChapter(context.Chapter))"
                               title="Upscale this chapter." />
            }
            else
            {
                <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward"
                               Color="Color.Secondary" Variant="Variant.Text"
                               OnClick="@(() => DeleteUpscaledConfirm(context.Chapter))"
                               title="Delete upscaled version of this chapter." />
            }
        </MudTd>
        <MudTd DataLabel="Upscaler Profile">
            @(context.Chapter.UpscalerProfile?.Deleted == true ? $"{context.Chapter.UpscalerProfile.Name} (old)" : context.Chapter.UpscalerProfile?.Name)
        </MudTd>
        <MudTd DataLabel="Actions">
            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                           Color="Color.Error" Variant="Variant.Text"
                           OnClick="@(() => DeleteChapterConfirm(context.Chapter))"
                           title="Delete this chapter" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    [Parameter] public Manga Manga { get; set; }

    private ReadOnlyObservableCollection<ChapterItem> chapterItems;
    private SourceList<ChapterItem> chapters = new();

    private HashSet<ChapterItem> selectedChapters;


    private async Task DeleteSelected()
    {
        var result = await DialogService.ShowMessageBox("Upscale Selected Chapters", "Are you sure you want to upscale the selected chapters?", yesText: "Yes", cancelText: "No");
        if (result == true)
        {
            selectedChapters?.ToList().ForEach(async c => await DeleteChapter(c.Chapter));
        }
    }

    private async Task DeleteChapterConfirm(Chapter chapter)
    {
        var result = await DialogService.ShowMessageBox("Delete Chapter", "Are you sure you want to delete this chapter?", yesText: "Yes", cancelText: "No");
        if (result == true)
        {
            await DeleteChapter(chapter);
        }
    }

    private async Task DeleteChapter(Chapter chapter)
    {
        await DeleteUpscaled(chapter);

        string toDelete = Path.Combine(Manga.Library.NotUpscaledLibraryPath, chapter.RelativePath);

        if (!File.Exists(toDelete))
        {
            return;
        }

        try
        {
            File.Delete(toDelete);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Failed to delete file of Chapter {ChapterId}", chapter.Id);
            Snackbar.Add($"Failed to delete {chapter.FileName}. Check the logs for more information.", Severity.Error);
        }

        DbContext.Remove(chapter);

        await DbContext.SaveChangesAsync();

        chapters.Remove(chapterItems.First(ci => ci.Chapter == chapter));
    }

    private async Task UpscaleChapter(Chapter chapter)
    {
        if (chapter.IsUpscaled)
        {
            return;
        }
        if (!DbContext.Entry(Manga.Library).Reference(l => l.UpscalerProfile).IsLoaded)
        {
            await DbContext.Entry(Manga.Library).Reference(l => l.UpscalerProfile).LoadAsync();
        }

        await TaskQueue.EnqueueAsync(
            new UpscaleTask(chapter, Manga.Library.UpscalerProfile));
    }

    private async Task DeleteSelectedUpscaled()
    {
        var result = await DialogService.ShowMessageBox("Delete Upscaled Selected Chapters", "Are you sure you want to delete the upscaled versions of the selected chapters?", yesText: "Yes", cancelText: "No");
        if (result == true)
        {
            selectedChapters?.ToList().ForEach(async c => await DeleteUpscaled(c.Chapter));
        }
    }

    private async Task DeleteUpscaledConfirm(Chapter chapter)
    {
        var result = await DialogService.ShowMessageBox("Delete Upscaled Chapter", "Are you sure you want to delete the upscaled version of this chapter?", yesText: "Yes", cancelText: "No");
        if (result == true)
        {
            await DeleteUpscaled(chapter);
        }
    }

    private async Task DeleteUpscaled(Chapter chapter)
    {
        if (!chapter.IsUpscaled)
        {
            return;
        }

        string toDelete = Path.Combine(Manga.Library.UpscaledLibraryPath, chapter.RelativePath);
        if (!File.Exists(toDelete))
        {
            return;
        }

        try
        {
            File.Delete(toDelete);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Failed to delete upscaled file of Chapter {ChapterId}", chapter.Id);
            Snackbar.Add($"Failed to delete upscaled {chapter.FileName}. Check the logs for more information.", Severity.Error);
        }

        chapter.IsUpscaled = false;

        await DbContext.SaveChangesAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        if (!DbContext.Entry(Manga).Collection(m => m.Chapters).IsLoaded)
        {
            await DbContext.Entry(Manga).Collection(m => m.Chapters).LoadAsync();
        }
        if (!DbContext.Entry(Manga).Reference(m => m.Library).IsLoaded)
        {
            await DbContext.Entry(Manga).Reference(m => m.Library).LoadAsync();
        }

        bool loadingFailed = await LoadChapters();
        if (loadingFailed)
        {
            bool resultedInChanges = LibraryIntegrityChecker.CheckIntegrity(Manga)
            if (resultedInChanges.Result)
            {
                await LoadChapters();
            }
        }

        chapters.Connect()
            .Sort(new NaturalSortComparer<ChapterItem>(ci => ci.ExtractedMetadata.ChapterTitle))
            .Bind(out chapterItems)
                .Subscribe();
    }

    private async Task<bool> LoadChapters()
    {
        bool loadingFailed = false;

        foreach (var chapter in Manga.Chapters)
        {
            Task<UpscalerProfile?> loadProfile = Task.FromResult<UpscalerProfile?>(null);
            if (chapter.UpscalerProfileId.HasValue && !DbContext.Entry(chapter).Reference(c => c.UpscalerProfile).IsLoaded)
            {
                // The following is used to ignore soft deleted profiles
                loadProfile = DbContext.UpscalerProfiles.IgnoreQueryFilters().FirstOrDefaultAsync(p => p.Id == chapter.UpscalerProfileId);
            }
            try
            {
                var extractedMetadata = MetadataHandler.GetSeriesAndTitleFromComicInfo(Path.Combine(Manga.Library.NotUpscaledLibraryPath, chapter.RelativePath));
                chapter.UpscalerProfile = await loadProfile;
                chapters.Add(new ChapterItem { Chapter = chapter, ExtractedMetadata = extractedMetadata });
            }
            catch (Exception e)
            {
                Logger.LogError(e, "Failed to load metadata for Chapter {ChapterId}", chapter.Id);
                Snackbar.Add($"Failed to load metadata for {chapter.FileName}. Check the logs for more information.", Severity.Error);
                loadingFailed = true;
                continue;
            }
        }

        return loadingFailed;
    }

    private record ChapterItem
    {
        public Chapter Chapter { get; set; }
        public ExtractedMetadata ExtractedMetadata { get; set; }
    }
}
