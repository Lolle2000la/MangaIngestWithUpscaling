@using System.Collections.ObjectModel
@using DynamicData
@using MangaIngestWithUpscaling.Data.LibraryManagement
@using MangaIngestWithUpscaling.Helpers
@using MangaIngestWithUpscaling.Services.BackqroundTaskQueue
@using MangaIngestWithUpscaling.Services.BackqroundTaskQueue.Tasks
@using MangaIngestWithUpscaling.Services.Integrations
@using MangaIngestWithUpscaling.Services.LibraryIntegrity
@using MangaIngestWithUpscaling.Services.MetadataHandling
@using MangaIngestWithUpscaling.Shared.Services.FileSystem
@using MangaIngestWithUpscaling.Shared.Services.MetadataHandling
@inject ApplicationDbContext DbContext
@inject IMetadataHandlingService MetadataHandler
@inject IMangaMetadataChanger MangaMetadataChanger
@inject ITaskQueue TaskQueue
@inject ILogger<ChapterList> Logger
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ILibraryIntegrityChecker LibraryIntegrityChecker
@inject IFileSystem FileSystem
@inject IChapterChangedNotifier ChapterChangedNotifier

<MudTable T="ChapterItem" @bind-SelectedItems="selectedChapters"
          Items="@chapterItems"
          Dense="true"
          MultiSelection="true"
          CanCancelEdit="true"
          RowEditCommit="r => _ = OnChapterMetadataCommit(r as ChapterItem)"
          RowEditCancel="r => OnChapterMetadataDiscard(r as ChapterItem)">
    <ToolBarContent>
        <MudStack Row>
            <MudButton StartIcon="@Icons.Material.Filled.Delete"
                       Color="Color.Error"
                       Variant="Variant.Text"
                       Disabled="selectedChapters.Count == 0"
                       OnClick="@(async () => await DeleteSelected())">
                Delete Selected
            </MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.ArrowUpward"
                       Color="Color.Primary"
                       Variant="Variant.Text"
                       Disabled="selectedChapters.Count == 0 || selectedChapters.All(c => c.Chapter.IsUpscaled)"
                       OnClick="@UpscaleSelectedChapters">
                Upscale Selected
            </MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.ArrowDownward"
                       Color="Color.Secondary"
                       Variant="Variant.Text"
                       Disabled="selectedChapters.Count == 0 || !selectedChapters.Any(c => c.Chapter.IsUpscaled)"
                       OnClick="@(async () => await DeleteSelectedUpscaled())">
                Delete Upscaled Selected
            </MudButton>
        </MudStack>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Chapter Title</MudTh>
        <MudTh>Chapter Path</MudTh>
        <MudTh>Upscaled</MudTh>
        <MudTh>Upscaler Profile</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Chapter Title">@(context.ExtractedMetadata?.ChapterTitle ?? "N/A")</MudTd>
        <MudTd DataLabel="Chapter Path">@context.Chapter.RelativePath</MudTd>
        <MudTd DataLabel="Upscaled">
            @context.Chapter.IsUpscaled
            @if (!context.Chapter.IsUpscaled)
            {
                <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward"
                               Color="Color.Primary" Variant="Variant.Text"
                               OnClick="@(() => UpscaleChapter(context.Chapter))"
                               title="Upscale this chapter."/>
            }
            else
            {
                <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward"
                               Color="Color.Secondary" Variant="Variant.Text"
                               OnClick="@(() => DeleteUpscaledConfirm(context.Chapter))"
                               title="Delete upscaled version of this chapter."/>
            }
        </MudTd>
        <MudTd DataLabel="Upscaler Profile">
            @(context.Chapter.UpscalerProfile?.Deleted == true ? $"{context.Chapter.UpscalerProfile.Name} (old)" : context.Chapter.UpscalerProfile?.Name)
        </MudTd>
        <MudTd DataLabel="Actions">
            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                           Color="Color.Error" Variant="Variant.Text"
                           OnClick="@(() => DeleteChapterConfirm(context.Chapter))"
                           title="Delete this chapter"/>
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Chapter Title">
            <MudInput @bind-Value="context.NewTitle"/>
        </MudTd>
        <MudTd DataLabel="Chapter Path">
            <MudInput @bind-Value="context.NewFileName" Label="Filename" HelperText="Filename"/>
            .cbz
        </MudTd>
        <MudTd DataLabel="Upscaled">
            @context.Chapter.IsUpscaled
            @if (!context.Chapter.IsUpscaled)
            {
                <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward"
                               Color="Color.Primary" Variant="Variant.Text"
                               OnClick="@(() => UpscaleChapter(context.Chapter))"
                               title="Upscale this chapter."/>
            }
            else
            {
                <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward"
                               Color="Color.Secondary" Variant="Variant.Text"
                               OnClick="@(() => DeleteUpscaledConfirm(context.Chapter))"
                               title="Delete upscaled version of this chapter."/>
            }
        </MudTd>
        <MudTd DataLabel="Upscaler Profile">
            @(context.Chapter.UpscalerProfile?.Deleted == true ? $"{context.Chapter.UpscalerProfile.Name} (old)" : context.Chapter.UpscalerProfile?.Name)
        </MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>

@code {
    [Parameter] public required Manga Manga { get; set; }

    private ReadOnlyObservableCollection<ChapterItem> chapterItems = new([]);
    private SourceList<ChapterItem> chapters = new();

    private HashSet<ChapterItem> selectedChapters = new();


    private async Task DeleteSelected()
    {
        var result = await DialogService.ShowMessageBox("Delete Selected Chapters", "Are you sure you want to delete the selected chapters?", yesText: "Yes", cancelText: "No");
        if (result == true)
        {
            var chaptersToDelete = selectedChapters.ToList();
            foreach (var c in chaptersToDelete)
            {
                await DeleteChapter(c.Chapter);
            }
        }
    }

    private async Task UpscaleSelectedChapters()
    {
        var chaptersToUpscale = selectedChapters.Where(c => !c.Chapter.IsUpscaled).ToList();
        foreach (var c in chaptersToUpscale)
        {
            await UpscaleChapter(c.Chapter);
        }
    }

    private async Task DeleteSelectedUpscaled()
    {
        var result = await DialogService.ShowMessageBox("Delete Upscaled Selected Chapters", "Are you sure you want to delete the upscaled versions of the selected chapters?", "Yes", cancelText: "No");
        if (result == true)
        {
            var chaptersToProcess = selectedChapters.ToList();
            foreach (var c in chaptersToProcess)
            {
                await DeleteUpscaled(c.Chapter);
            }
        }
    }

    private async Task DeleteChapterConfirm(Chapter chapter)
    {
        var result = await DialogService.ShowMessageBox("Delete Chapter", "Are you sure you want to delete this chapter?", yesText: "Yes", cancelText: "No");
        if (result == true)
        {
            await DeleteChapter(chapter);
        }
    }

    private async Task OnChapterMetadataCommit(ChapterItem? chapter)
    {
        if (chapter == null) return;

        if (chapter.ExtractedMetadata?.ChapterTitle != chapter.NewTitle)
        {
            await MangaMetadataChanger.ChangeChapterTitle(chapter.Chapter, chapter.NewTitle);
            if (chapter.ExtractedMetadata != null)
            {
                chapter.ExtractedMetadata = chapter.ExtractedMetadata with { ChapterTitle = chapter.NewTitle };
            }
        }

        if (Path.GetFileNameWithoutExtension(chapter.Chapter.FileName) != chapter.NewFileName)
        {
            if (!await RenameChapterFile(chapter.Chapter, chapter.NewFileName + ".cbz"))
            {
                chapter.NewFileName = Path.GetFileNameWithoutExtension(chapter.Chapter.FileName);
            }
        }
    }

    private void OnChapterMetadataDiscard(ChapterItem? chapter)
    {
        if (chapter == null) return;

        chapter.NewTitle = chapter.ExtractedMetadata?.ChapterTitle ?? string.Empty;
        chapter.NewFileName = Path.GetFileNameWithoutExtension(chapter.Chapter.FileName);
    }

    private async Task DeleteChapter(Chapter chapter)
    {
        await DeleteUpscaled(chapter);

        string toDelete = Path.Combine(Manga.Library.NotUpscaledLibraryPath, chapter.RelativePath);

        if (!File.Exists(toDelete))
        {
            return;
        }

        try
        {
            File.Delete(toDelete);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Failed to delete file of Chapter {ChapterId}", chapter.Id);
            Snackbar.Add($"Failed to delete {chapter.FileName}. Check the logs for more information.", Severity.Error);
        }

        DbContext.Remove(chapter);

        await DbContext.SaveChangesAsync();

        chapters.Remove(chapterItems.First(ci => ci.Chapter == chapter));
    }

    private async Task UpscaleChapter(Chapter chapter)
    {
        if (chapter.IsUpscaled)
        {
            return;
        }

        if (!DbContext.Entry(Manga.Library).Reference(l => l.UpscalerProfile).IsLoaded)
        {
            await DbContext.Entry(Manga.Library).Reference(l => l.UpscalerProfile).LoadAsync();
        }

        if (Manga.Library.UpscalerProfile == null)
        {
            Snackbar.Add("Upscaler profile not set for this library.", Severity.Error);
            return;
        }

        await TaskQueue.EnqueueAsync(
            new UpscaleTask(chapter, Manga.Library.UpscalerProfile));
    }

    private async Task DeleteUpscaledConfirm(Chapter chapter)
    {
        var result = await DialogService.ShowMessageBox("Delete Upscaled Chapter", "Are you sure you want to delete the upscaled version of this chapter?", yesText: "Yes", cancelText: "No");
        if (result == true)
        {
            await DeleteUpscaled(chapter);
        }
    }

    private async Task DeleteUpscaled(Chapter chapter)
    {
        if (!chapter.IsUpscaled)
        {
            return;
        }

        if (string.IsNullOrEmpty(Manga.Library.UpscaledLibraryPath))
        {
            Snackbar.Add("Upscaled library path not set for this library.", Severity.Error);
            return;
        }

        string toDelete = Path.Combine(Manga.Library.UpscaledLibraryPath, chapter.RelativePath);
        if (!File.Exists(toDelete))
        {
            return;
        }

        try
        {
            File.Delete(toDelete);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Failed to delete upscaled file of Chapter {ChapterId}", chapter.Id);
            Snackbar.Add($"Failed to delete upscaled {chapter.FileName}. Check the logs for more information.", Severity.Error);
        }

        chapter.IsUpscaled = false;

        await DbContext.SaveChangesAsync();
    }

    private async Task<bool> RenameChapterFile(Chapter chapter, string newFileName)
    {
        // Check if the new name contains invalid characters
        if (newFileName.IndexOfAny(Path.GetInvalidFileNameChars()) >= 0)
        {
            Snackbar.Add("The new name contains invalid characters.", Severity.Error);
            return false;
        }

        if (Manga?.Library == null) // Ensure Manga and Library are not null
        {
            Snackbar.Add("Manga or Library information is missing.", Severity.Error);
            return false;
        }

        if (string.IsNullOrEmpty(Manga.Library.UpscaledLibraryPath) && chapter.IsUpscaled)
        {
            Snackbar.Add("Upscaled library path not set for this library, but chapter is upscaled.", Severity.Error);
            return false;
        }

        var mangaTitle = Manga.PrimaryTitle ?? "Unknown_Series";
        string oldPath = Path.Combine(chapter.Manga.Library.NotUpscaledLibraryPath, chapter.RelativePath);
        var targetRelativePath = Path.Combine(PathEscaper.EscapeFileName(mangaTitle), newFileName);
        string newPath = Path.Combine(chapter.Manga.Library.NotUpscaledLibraryPath, targetRelativePath);
        bool success = true;

        string? oldUpscaledPath = null;
        string? newUpscaledPath = null;

        try
        {
            FileSystem.Move(oldPath, newPath);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Failed to rename file of Chapter {ChapterId}", chapter.Id);
            Snackbar.Add($"Failed to rename {chapter.FileName}. Check the logs for more information.", Severity.Error);
            success = false;
        }

        if (chapter.IsUpscaled && Manga?.Library?.UpscaledLibraryPath != null)
        {
            oldUpscaledPath = Path.Combine(Manga.Library.UpscaledLibraryPath, chapter.RelativePath);
            newUpscaledPath = Path.Combine(Manga.Library.UpscaledLibraryPath, targetRelativePath);
            if (success)
            {
                try
                {
                    FileSystem.Move(oldUpscaledPath, newUpscaledPath);
                }
                catch (Exception e)
                {
                    Logger.LogError(e, "Failed to rename upscaled file of Chapter {ChapterId}", chapter.Id);
                    Snackbar.Add($"Failed to rename upscaled {chapter.FileName}. Check the logs for more information.", Severity.Error);
                    success = false;
                    // Try to revert the rename of the not upscaled file
                    FileSystem.Move(newPath, oldPath);
                }
            }
        }

        if (success)
        {
            chapter.RelativePath = targetRelativePath;
            chapter.FileName = newFileName;
            await DbContext.SaveChangesAsync();
            _ = ChapterChangedNotifier.Notify(chapter, false);
            if (chapter.IsUpscaled)
            {
                _ = ChapterChangedNotifier.Notify(chapter, true);
            }
        }
        else
        {
            if (File.Exists(newPath))
            {
                try
                {
                    FileSystem.Move(newPath, oldPath);
                }
                catch (Exception e)
                {
                    Logger.LogError(e, "Failed to revert rename of file of Chapter {ChapterId}", chapter.Id);
                    Snackbar.Add($"Failed to revert rename of {chapter.FileName}. Check the logs for more information.", Severity.Error);
                }
            }

            if (File.Exists(newUpscaledPath) && newUpscaledPath != null && oldUpscaledPath != null)
            {
                try
                {
                    FileSystem.Move(newUpscaledPath, oldUpscaledPath);
                }
                catch (Exception e)
                {
                    Logger.LogError(e, "Failed to revert rename of upscaled file of Chapter {ChapterId}", chapter.Id);
                    Snackbar.Add($"Failed to revert rename of upscaled {chapter.FileName}. Check the logs for more information.", Severity.Error);
                }
            }
        }

        return success;
    }

    protected override async Task OnInitializedAsync()
    {
        if (!DbContext.Entry(Manga).Collection(m => m.Chapters).IsLoaded)
        {
            await DbContext.Entry(Manga).Collection(m => m.Chapters).LoadAsync();
        }

        if (!DbContext.Entry(Manga).Reference(m => m.Library).IsLoaded)
        {
            await DbContext.Entry(Manga).Reference(m => m.Library).LoadAsync();
        }

        await LoadChapters();

        _ = Task.Run(async () => { return await LibraryIntegrityChecker.CheckIntegrity(Manga); }).ContinueWith(async t =>
        {
            if (t.IsFaulted)
            {
                Logger.LogError(t.Exception, "Error checking library integrity for Manga ID {MangaId}", Manga?.Id);
                return;
            }

            if (t.Result) // t.Result is the boolean from CheckIntegrity
            {
                await InvokeAsync(async () =>
                {
                    await LoadChapters();
                    StateHasChanged();
                });
            }
        }, TaskScheduler.FromCurrentSynchronizationContext());

        chapters.Connect()
            .Sort(new NaturalSortComparer<ChapterItem>(ci => ci.ExtractedMetadata?.ChapterTitle ?? string.Empty))
            .Bind(out chapterItems)
            .Subscribe();
    }

    private async Task<bool> LoadChapters()
    {
        bool loadingFailed = false;
        chapters.Clear();
        if (Manga.Chapters == null)
        {
            Logger.LogWarning("Chapters is null in LoadChapters for Manga ID {MangaId}.", Manga.Id);
            return true;
        }

        foreach (var chapter in Manga.Chapters.ToList()) // ToList() を追加して、コレクションの変更を許可します
        {
            var loadProfile = Task.FromResult(chapter.UpscalerProfile);
            if (chapter.UpscalerProfileId is not null && !DbContext.Entry(chapter).Reference(c => c.UpscalerProfile).IsLoaded)
            {
                // The following is used to ignore soft deleted profiles
                loadProfile = DbContext.UpscalerProfiles.IgnoreQueryFilters()
                    .FirstOrDefaultAsync(p => p.Id == chapter.UpscalerProfileId);
            }

            try
            {
                if (Manga.Library?.NotUpscaledLibraryPath == null)
                {
                    loadingFailed = true;
                    continue;
                }

                if (string.IsNullOrEmpty(chapter.RelativePath))
                {
                    Logger.LogWarning("Chapter {ChapterId} has null or empty RelativePath.", chapter.Id);
                    loadingFailed = true;
                    continue;
                }

                var extractedMetadata = MetadataHandler.GetSeriesAndTitleFromComicInfo(Path.Combine(Manga.Library.NotUpscaledLibraryPath, chapter.RelativePath));
                chapter.UpscalerProfile = await loadProfile;
                chapters.Add(new ChapterItem
                {
                    Chapter = chapter,
                    ExtractedMetadata = extractedMetadata,
                    NewTitle = extractedMetadata?.ChapterTitle ?? string.Empty,
                    NewFileName = Path.GetFileNameWithoutExtension(chapter.FileName)
                });
            }
            catch (Exception e)
            {
                Logger.LogError(e, "Failed to load metadata for Chapter {ChapterId}", chapter.Id);
                Snackbar.Add($"Failed to load metadata for {chapter.FileName}. Check the logs for more information.", Severity.Error);
                loadingFailed = true;
                continue;
            }
        }

        return loadingFailed;
    }

    private record ChapterItem
    {
        public required Chapter Chapter { get; set; }
        public ExtractedMetadata? ExtractedMetadata { get; set; }
        public required string NewTitle { get; set; }
        public required string NewFileName { get; set; }
    }

}
