@using System.Collections.ObjectModel
@using System.Text.RegularExpressions
@using DynamicData
@using MangaIngestWithUpscaling.Data.LibraryManagement
@using MangaIngestWithUpscaling.Helpers
@using MangaIngestWithUpscaling.Services.BackqroundTaskQueue
@using MangaIngestWithUpscaling.Services.BackqroundTaskQueue.Tasks
@using MangaIngestWithUpscaling.Services.ChapterMerging
@using MangaIngestWithUpscaling.Services.Integrations
@using MangaIngestWithUpscaling.Services.LibraryIntegrity
@using MangaIngestWithUpscaling.Services.MetadataHandling
@using MangaIngestWithUpscaling.Shared.Services.FileSystem
@using MangaIngestWithUpscaling.Shared.Services.MetadataHandling
@inject ApplicationDbContext DbContext
@inject IMetadataHandlingService MetadataHandler
@inject IMangaMetadataChanger MangaMetadataChanger
@inject ITaskQueue TaskQueue
@inject ILogger<ChapterList> Logger
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ILibraryIntegrityChecker LibraryIntegrityChecker
@inject IFileSystem FileSystem
@inject IChapterChangedNotifier ChapterChangedNotifier
@inject IChapterMergeRevertService ChapterMergeRevertService
@inject IChapterMergeCoordinator ChapterMergeCoordinator

<MudTable T="ChapterItem" @bind-SelectedItems="selectedChapters"
          Items="@chapterItems"
          Dense="true"
          MultiSelection="true"
          CanCancelEdit="true"
          RowEditCommit="r => _ = OnChapterMetadataCommit(r as ChapterItem)"
          RowEditCancel="r => OnChapterMetadataDiscard(r as ChapterItem)">
    <ToolBarContent>
        <MudStack Row>
            <MudButton StartIcon="@Icons.Material.Filled.Delete"
                       Color="Color.Error"
                       Variant="Variant.Text"
                       Disabled="selectedChapters.Count == 0"
                       OnClick="@(async () => await DeleteSelected())">
                Delete Selected
            </MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.ArrowUpward"
                       Color="Color.Primary"
                       Variant="Variant.Text"
                       Disabled="selectedChapters.Count == 0 || selectedChapters.All(c => c.Chapter.IsUpscaled)"
                       OnClick="@UpscaleSelectedChapters">
                Upscale Selected
            </MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.ArrowDownward"
                       Color="Color.Secondary"
                       Variant="Variant.Text"
                       Disabled="selectedChapters.Count == 0 || !selectedChapters.Any(c => c.Chapter.IsUpscaled)"
                       OnClick="@DeleteSelectedUpscaled">
                Delete Upscaled Selected
            </MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.Undo"
                       Color="Color.Warning"
                       Variant="Variant.Text"
                       Disabled="selectedChapters.Count == 0 || !selectedChapters.Any(c => c.IsMerged)"
                       OnClick="@RevertSelectedMergedChapters">
                Revert Selected Merged
            </MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.MergeType"
                       Color="Color.Info"
                       Variant="Variant.Text"
                       Disabled="selectedChapters.Count == 0 || !CanAnySelectedBeMerged"
                       OnClick="@MergeSelectedChapters">
                Merge Selected
            </MudButton>
        </MudStack>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Chapter Title</MudTh>
        <MudTh>Chapter Path</MudTh>
        <MudTh>Upscaled</MudTh>
        <MudTh>Upscaler Profile</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Chapter Title">
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                <MudText>@(context.ExtractedMetadata?.ChapterTitle ?? "N/A")</MudText>
                @if (context.IsMerged)
                {
                    <MudChip T="string" Size="Size.Small" Color="Color.Info" Variant="Variant.Filled">
                        <MudIcon Icon="@Icons.Material.Filled.CallMerge" Size="Size.Small"/>
                        Merged
                    </MudChip>
                }
            </MudStack>
        </MudTd>
        <MudTd DataLabel="Chapter Path">@context.Chapter.RelativePath</MudTd>
        <MudTd DataLabel="Upscaled">
            @context.Chapter.IsUpscaled
            @if (!context.Chapter.IsUpscaled)
            {
                <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward"
                               Color="Color.Primary" Variant="Variant.Text"
                               OnClick="@(() => UpscaleChapter(context.Chapter))"
                               title="Upscale this chapter."/>
            }
            else
            {
                <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward"
                               Color="Color.Secondary" Variant="Variant.Text"
                               OnClick="@(() => DeleteUpscaledConfirm(context.Chapter))"
                               title="Delete upscaled version of this chapter."/>
            }
        </MudTd>
        <MudTd DataLabel="Upscaler Profile">
            @(context.Chapter.UpscalerProfile?.Deleted == true ? $"{context.Chapter.UpscalerProfile.Name} (old)" : context.Chapter.UpscalerProfile?.Name)
        </MudTd>
        <MudTd DataLabel="Actions">
            <MudStack Row="true" Spacing="1">
                @if (context.IsMerged)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Undo"
                                   Color="Color.Warning" Variant="Variant.Text"
                                   OnClick="@(() => RevertMergedChapterConfirm(context.Chapter))"
                                   title="Revert this merged chapter back to individual parts"/>
                }
                @if (CanManualMergeChapterSync(context.Chapter))
                {
                    <MudIconButton Icon="@Icons.Material.Filled.MergeType"
                                   Color="Color.Info" Variant="Variant.Text"
                                   OnClick="@(() => MergeChapterConfirm(context.Chapter))"
                                   title="Merge this chapter with consecutive parts"/>
                }
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Color="Color.Error" Variant="Variant.Text"
                               OnClick="@(() => DeleteChapterConfirm(context.Chapter))"
                               title="Delete this chapter"/>
            </MudStack>
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Chapter Title">
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                <MudInput @bind-Value="context.NewTitle"/>
                @if (context.IsMerged)
                {
                    <MudChip T="string" Size="Size.Small" Color="Color.Info" Variant="Variant.Filled">
                        <MudIcon Icon="@Icons.Material.Filled.CallMerge" Size="Size.Small"/>
                        Merged
                    </MudChip>
                }
            </MudStack>
        </MudTd>
        <MudTd DataLabel="Chapter Path">
            <MudInput @bind-Value="context.NewFileName" Label="Filename" HelperText="Filename"/>
            .cbz
        </MudTd>
        <MudTd DataLabel="Upscaled">
            @context.Chapter.IsUpscaled
            @if (!context.Chapter.IsUpscaled)
            {
                <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward"
                               Color="Color.Primary" Variant="Variant.Text"
                               OnClick="@(() => UpscaleChapter(context.Chapter))"
                               title="Upscale this chapter."/>
            }
            else
            {
                <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward"
                               Color="Color.Secondary" Variant="Variant.Text"
                               OnClick="@(() => DeleteUpscaledConfirm(context.Chapter))"
                               title="Delete upscaled version of this chapter."/>
            }
        </MudTd>
        <MudTd DataLabel="Upscaler Profile">
            @(context.Chapter.UpscalerProfile?.Deleted == true ? $"{context.Chapter.UpscalerProfile.Name} (old)" : context.Chapter.UpscalerProfile?.Name)
        </MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>

@code {
    [Parameter] public required Manga Manga { get; set; }

    private ReadOnlyObservableCollection<ChapterItem> chapterItems = new([]);
    private SourceList<ChapterItem> chapters = new();

    private HashSet<ChapterItem> selectedChapters = new();


    private async Task DeleteSelected()
    {
        var result = await DialogService.ShowMessageBox("Delete Selected Chapters", "Are you sure you want to delete the selected chapters?", yesText: "Yes", cancelText: "No");
        if (result == true)
        {
            var chaptersToDelete = selectedChapters.ToList();
            foreach (var c in chaptersToDelete)
            {
                await DeleteChapter(c.Chapter);
            }
        }
    }

    private async Task UpscaleSelectedChapters()
    {
        var chaptersToUpscale = selectedChapters.Where(c => !c.Chapter.IsUpscaled).ToList();
        foreach (var c in chaptersToUpscale)
        {
            await UpscaleChapter(c.Chapter);
        }
    }

    private async Task DeleteSelectedUpscaled()
    {
        var result = await DialogService.ShowMessageBox("Delete Upscaled Selected Chapters", "Are you sure you want to delete the upscaled versions of the selected chapters?", "Yes", cancelText: "No");
        if (result == true)
        {
            var chaptersToProcess = selectedChapters.ToList();
            foreach (var c in chaptersToProcess)
            {
                await DeleteUpscaled(c.Chapter);
            }
        }
    }

    private async Task RevertSelectedMergedChapters()
    {
        // Filter to only merged chapters from the selection
        var mergedChapters = selectedChapters.Where(c => c.IsMerged).ToList();

        if (!mergedChapters.Any())
        {
            Snackbar.Add("No merged chapters selected for reversion.", Severity.Warning);
            return;
        }

        var result = await DialogService.ShowMessageBox(
            "Revert Selected Merged Chapters",
            $"Are you sure you want to revert {mergedChapters.Count} merged chapters back to their original parts? This will delete the merged chapters and restore the individual parts.",
            "Yes",
            cancelText: "No");

        if (result == true)
        {
            int successCount = 0;
            int failureCount = 0;

            foreach (var chapterItem in mergedChapters)
            {
                try
                {
                    await RevertMergedChapter(chapterItem.Chapter);
                    successCount++;
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "Failed to revert merged chapter {ChapterId}", chapterItem.Chapter.Id);
                    failureCount++;
                }
            }

            if (successCount > 0)
            {
                Snackbar.Add($"Successfully reverted {successCount} merged chapters.", Severity.Success);
            }

            if (failureCount > 0)
            {
                Snackbar.Add($"Failed to revert {failureCount} merged chapters. Check the logs for more information.", Severity.Error);
            }
        }
    }

    private async Task DeleteChapterConfirm(Chapter chapter)
    {
        var result = await DialogService.ShowMessageBox("Delete Chapter", "Are you sure you want to delete this chapter?", yesText: "Yes", cancelText: "No");
        if (result == true)
        {
            await DeleteChapter(chapter);
        }
    }

    private async Task RevertMergedChapterConfirm(Chapter chapter)
    {
        var result = await DialogService.ShowMessageBox(
            "Revert Merged Chapter",
            "Are you sure you want to revert this merged chapter back to its original parts? This will delete the merged chapter and restore the individual parts.",
            "Yes",
            cancelText: "No");

        if (result == true)
        {
            await RevertMergedChapter(chapter);
        }
    }

    private async Task RevertMergedChapter(Chapter chapter)
    {
        try
        {
            var restoredChapters = await ChapterMergeRevertService.RevertMergedChapterAsync(chapter);

            // Remove the merged chapter from the UI
            var chapterItem = chapterItems.FirstOrDefault(ci => ci.Chapter.Id == chapter.Id);
            if (chapterItem != null)
            {
                chapters.Remove(chapterItem);
            }

            // Add the restored chapters to the UI
            foreach (var restoredChapter in restoredChapters)
            {
                var extractedMetadata = MetadataHandler.GetSeriesAndTitleFromComicInfo(
                    Path.Combine(Manga.Library.NotUpscaledLibraryPath, restoredChapter.RelativePath));

                chapters.Add(new ChapterItem
                {
                    Chapter = restoredChapter,
                    ExtractedMetadata = extractedMetadata,
                    NewTitle = extractedMetadata?.ChapterTitle ?? string.Empty,
                    NewFileName = Path.GetFileNameWithoutExtension(restoredChapter.FileName),
                    IsMerged = false // Restored chapters are not merged
                });
            }

            Snackbar.Add($"Successfully reverted merged chapter and restored {restoredChapters.Count} individual parts.", Severity.Success);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to revert merged chapter {ChapterId}", chapter.Id);
            Snackbar.Add("Failed to revert merged chapter. Check the logs for more information.", Severity.Error);
        }
    }

    private async Task OnChapterMetadataCommit(ChapterItem? chapter)
    {
        if (chapter == null) return;

        if (chapter.ExtractedMetadata?.ChapterTitle != chapter.NewTitle)
        {
            await MangaMetadataChanger.ChangeChapterTitle(chapter.Chapter, chapter.NewTitle);
            if (chapter.ExtractedMetadata != null)
            {
                chapter.ExtractedMetadata = chapter.ExtractedMetadata with { ChapterTitle = chapter.NewTitle };
            }
        }

        if (Path.GetFileNameWithoutExtension(chapter.Chapter.FileName) != chapter.NewFileName)
        {
            if (!await RenameChapterFile(chapter.Chapter, chapter.NewFileName + ".cbz"))
            {
                chapter.NewFileName = Path.GetFileNameWithoutExtension(chapter.Chapter.FileName);
            }
        }
    }

    private void OnChapterMetadataDiscard(ChapterItem? chapter)
    {
        if (chapter == null) return;

        chapter.NewTitle = chapter.ExtractedMetadata?.ChapterTitle ?? string.Empty;
        chapter.NewFileName = Path.GetFileNameWithoutExtension(chapter.Chapter.FileName);
    }

    private async Task DeleteChapter(Chapter chapter)
    {
        await DeleteUpscaled(chapter);

        string toDelete = Path.Combine(Manga.Library.NotUpscaledLibraryPath, chapter.RelativePath);

        if (!File.Exists(toDelete))
        {
            return;
        }

        try
        {
            File.Delete(toDelete);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Failed to delete file of Chapter {ChapterId}", chapter.Id);
            Snackbar.Add($"Failed to delete {chapter.FileName}. Check the logs for more information.", Severity.Error);
        }

        DbContext.Remove(chapter);

        await DbContext.SaveChangesAsync();

        chapters.Remove(chapterItems.First(ci => ci.Chapter == chapter));
    }

    private async Task UpscaleChapter(Chapter chapter)
    {
        if (chapter.IsUpscaled)
        {
            return;
        }

        if (!DbContext.Entry(Manga.Library).Reference(l => l.UpscalerProfile).IsLoaded)
        {
            await DbContext.Entry(Manga.Library).Reference(l => l.UpscalerProfile).LoadAsync();
        }

        if (!DbContext.Entry(Manga).Reference(m => m.UpscalerProfilePreference).IsLoaded)
        {
            await DbContext.Entry(Manga).Reference(m => m.UpscalerProfilePreference).LoadAsync();
        }

        if (Manga.EffectiveUpscalerProfile == null)
        {
            Snackbar.Add("Upscaler profile not set for this library/manga.", Severity.Error);
            return;
        }

        await TaskQueue.EnqueueAsync(
            new UpscaleTask(chapter));
    }

    private async Task DeleteUpscaledConfirm(Chapter chapter)
    {
        var result = await DialogService.ShowMessageBox("Delete Upscaled Chapter", "Are you sure you want to delete the upscaled version of this chapter?", yesText: "Yes", cancelText: "No");
        if (result == true)
        {
            await DeleteUpscaled(chapter);
        }
    }

    private async Task DeleteUpscaled(Chapter chapter)
    {
        if (!chapter.IsUpscaled)
        {
            return;
        }

        if (string.IsNullOrEmpty(Manga.Library.UpscaledLibraryPath))
        {
            Snackbar.Add("Upscaled library path not set for this library.", Severity.Error);
            return;
        }

        string toDelete = Path.Combine(Manga.Library.UpscaledLibraryPath, chapter.RelativePath);
        if (!File.Exists(toDelete))
        {
            return;
        }

        try
        {
            File.Delete(toDelete);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Failed to delete upscaled file of Chapter {ChapterId}", chapter.Id);
            Snackbar.Add($"Failed to delete upscaled {chapter.FileName}. Check the logs for more information.", Severity.Error);
        }

        chapter.IsUpscaled = false;

        await DbContext.SaveChangesAsync();
    }

    private async Task<bool> RenameChapterFile(Chapter chapter, string newFileName)
    {
        // Check if the new name contains invalid characters
        if (newFileName.IndexOfAny(Path.GetInvalidFileNameChars()) >= 0)
        {
            Snackbar.Add("The new name contains invalid characters.", Severity.Error);
            return false;
        }

        if (Manga?.Library == null) // Ensure Manga and Library are not null
        {
            Snackbar.Add("Manga or Library information is missing.", Severity.Error);
            return false;
        }

        if (string.IsNullOrEmpty(Manga.Library.UpscaledLibraryPath) && chapter.IsUpscaled)
        {
            Snackbar.Add("Upscaled library path not set for this library, but chapter is upscaled.", Severity.Error);
            return false;
        }

        var mangaTitle = Manga.PrimaryTitle ?? "Unknown_Series";
        string oldPath = Path.Combine(chapter.Manga.Library.NotUpscaledLibraryPath, chapter.RelativePath);
        var targetRelativePath = Path.Combine(PathEscaper.EscapeFileName(mangaTitle), newFileName);
        string newPath = Path.Combine(chapter.Manga.Library.NotUpscaledLibraryPath, targetRelativePath);
        bool success = true;

        string? oldUpscaledPath = null;
        string? newUpscaledPath = null;

        try
        {
            FileSystem.Move(oldPath, newPath);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Failed to rename file of Chapter {ChapterId}", chapter.Id);
            Snackbar.Add($"Failed to rename {chapter.FileName}. Check the logs for more information.", Severity.Error);
            success = false;
        }

        if (chapter.IsUpscaled && Manga?.Library?.UpscaledLibraryPath != null)
        {
            oldUpscaledPath = Path.Combine(Manga.Library.UpscaledLibraryPath, chapter.RelativePath);
            newUpscaledPath = Path.Combine(Manga.Library.UpscaledLibraryPath, targetRelativePath);
            if (success)
            {
                try
                {
                    FileSystem.Move(oldUpscaledPath, newUpscaledPath);
                }
                catch (Exception e)
                {
                    Logger.LogError(e, "Failed to rename upscaled file of Chapter {ChapterId}", chapter.Id);
                    Snackbar.Add($"Failed to rename upscaled {chapter.FileName}. Check the logs for more information.", Severity.Error);
                    success = false;
                    // Try to revert the rename of the not upscaled file
                    FileSystem.Move(newPath, oldPath);
                }
            }
        }

        if (success)
        {
            chapter.RelativePath = targetRelativePath;
            chapter.FileName = newFileName;
            await DbContext.SaveChangesAsync();
            _ = ChapterChangedNotifier.Notify(chapter, false);
            if (chapter.IsUpscaled)
            {
                _ = ChapterChangedNotifier.Notify(chapter, true);
            }
        }
        else
        {
            if (File.Exists(newPath))
            {
                try
                {
                    FileSystem.Move(newPath, oldPath);
                }
                catch (Exception e)
                {
                    Logger.LogError(e, "Failed to revert rename of file of Chapter {ChapterId}", chapter.Id);
                    Snackbar.Add($"Failed to revert rename of {chapter.FileName}. Check the logs for more information.", Severity.Error);
                }
            }

            if (File.Exists(newUpscaledPath) && newUpscaledPath != null && oldUpscaledPath != null)
            {
                try
                {
                    FileSystem.Move(newUpscaledPath, oldUpscaledPath);
                }
                catch (Exception e)
                {
                    Logger.LogError(e, "Failed to revert rename of upscaled file of Chapter {ChapterId}", chapter.Id);
                    Snackbar.Add($"Failed to revert rename of upscaled {chapter.FileName}. Check the logs for more information.", Severity.Error);
                }
            }
        }

        return success;
    }

    protected override async Task OnInitializedAsync()
    {
        if (!DbContext.Entry(Manga).Collection(m => m.Chapters).IsLoaded)
        {
            await DbContext.Entry(Manga).Collection(m => m.Chapters).LoadAsync();
        }

        if (!DbContext.Entry(Manga).Reference(m => m.Library).IsLoaded)
        {
            await DbContext.Entry(Manga).Reference(m => m.Library).LoadAsync();
        }

        await LoadChapters();

        _ = Task.Run(async () => { return await LibraryIntegrityChecker.CheckIntegrity(Manga); }).ContinueWith(async t =>
        {
            if (t.IsFaulted)
            {
                Logger.LogError(t.Exception, "Error checking library integrity for Manga ID {MangaId}", Manga?.Id);
                return;
            }

            if (t.Result) // t.Result is the boolean from CheckIntegrity
            {
                await InvokeAsync(async () =>
                {
                    await LoadChapters();
                    StateHasChanged();
                });
            }
        }, TaskScheduler.FromCurrentSynchronizationContext());

        chapters.Connect()
            .Sort(new NaturalSortComparer<ChapterItem>(ci => ci.ExtractedMetadata?.ChapterTitle ?? string.Empty))
            .Bind(out chapterItems)
            .Subscribe();
    }

    private async Task<bool> LoadChapters()
    {
        bool loadingFailed = false;
        chapters.Clear();
        if (Manga.Chapters == null)
        {
            Logger.LogWarning("Chapters is null in LoadChapters for Manga ID {MangaId}.", Manga.Id);
            return true;
        }

        foreach (var chapter in Manga.Chapters.ToList()) // ToList() を追加して、コレクションの変更を許可します
        {
            var loadProfile = Task.FromResult(chapter.UpscalerProfile);
            if (chapter.UpscalerProfileId is not null && chapter.UpscalerProfile is null)
            {
                // The following is used to ignore soft deleted profiles
                loadProfile = DbContext.UpscalerProfiles.IgnoreQueryFilters()
                    .FirstOrDefaultAsync(p => p.Id == chapter.UpscalerProfileId);
            }

            try
            {
                if (Manga.Library?.NotUpscaledLibraryPath == null)
                {
                    loadingFailed = true;
                    continue;
                }

                if (string.IsNullOrEmpty(chapter.RelativePath))
                {
                    Logger.LogWarning("Chapter {ChapterId} has null or empty RelativePath.", chapter.Id);
                    loadingFailed = true;
                    continue;
                }

                var extractedMetadata = MetadataHandler.GetSeriesAndTitleFromComicInfo(Path.Combine(Manga.Library.NotUpscaledLibraryPath, chapter.RelativePath));
                chapter.UpscalerProfile = await loadProfile;

                // Check if this chapter is a merged chapter
                var isMerged = await ChapterMergeRevertService.CanRevertChapterAsync(chapter);

                chapters.Add(new ChapterItem
                {
                    Chapter = chapter,
                    ExtractedMetadata = extractedMetadata,
                    NewTitle = extractedMetadata?.ChapterTitle ?? string.Empty,
                    NewFileName = Path.GetFileNameWithoutExtension(chapter.FileName),
                    IsMerged = isMerged
                });
            }
            catch (Exception e)
            {
                Logger.LogError(e, "Failed to load metadata for Chapter {ChapterId}", chapter.Id);
                Snackbar.Add($"Failed to load metadata for {chapter.FileName}. Check the logs for more information.", Severity.Error);
                loadingFailed = true;
                continue;
            }
        }

        return loadingFailed;
    }

    // Manual merge functionality
    private bool CanAnySelectedBeMerged
    {
        get
        {
            if (!selectedChapters.Any()) return false;

            // Get non-merged chapters from selection
            var nonMergedChapters = selectedChapters.Where(c => !c.IsMerged).Select(c => c.Chapter).ToList();
            if (!nonMergedChapters.Any()) return false;

            // Check if any of these chapters can form valid merge groups
            // This is a simplified synchronous check for UI - full validation happens in coordinator
            return nonMergedChapters.Any(chapter =>
            {
                var chapterNumber = chapter.FileName;
                return chapterItems.Any(ci => ci.Chapter.Id != chapter.Id && !ci.IsMerged &&
                                              ci.Chapter.FileName != chapterNumber &&
                                              SharesSameBaseNumber(chapterNumber, ci.Chapter.FileName));
            });
        }
    }

    private bool CanManualMergeSelected => selectedChapters.Any() && !selectedChapters.Any(c => c.IsMerged);

    private bool CanManualMergeChapterSync(Chapter chapter)
    {
        // Simple synchronous check - just verify it's not already merged and is not the only chapter part
        if (chapterItems.FirstOrDefault(ci => ci.Chapter.Id == chapter.Id)?.IsMerged == true)
            return false;

        // Basic check: see if there are other chapters with similar base numbers
        // This is a simplified check for UI rendering - actual validation happens in coordinator
        var chapterNumber = chapter.FileName;
        return chapterItems.Any(ci => ci.Chapter.Id != chapter.Id && !ci.IsMerged && 
            ci.Chapter.FileName != chapterNumber && 
            SharesSameBaseNumber(chapterNumber, ci.Chapter.FileName));
    }

    private bool SharesSameBaseNumber(string fileName1, string fileName2)
    {
        // Simple heuristic: check if both have same numeric prefix
        var num1 = ExtractNumericPrefix(fileName1);
        var num2 = ExtractNumericPrefix(fileName2);
        return !string.IsNullOrEmpty(num1) && !string.IsNullOrEmpty(num2) && 
               Math.Floor(decimal.Parse(num1)) == Math.Floor(decimal.Parse(num2));
    }

    private string? ExtractNumericPrefix(string fileName)
    {
        var match = Regex.Match(fileName, @"(\d+(?:\.\d+)?)");
        return match.Success ? match.Groups[1].Value : null;
    }

    private async Task MergeSelectedChapters()
    {
        if (!selectedChapters.Any())
        {
            Snackbar.Add("No chapters selected.", Severity.Warning);
            return;
        }

        // Filter to only non-merged chapters from the selection
        var selectedChapterList = selectedChapters.Where(c => !c.IsMerged).Select(ci => ci.Chapter).ToList();

        if (!selectedChapterList.Any())
        {
            Snackbar.Add("No non-merged chapters selected for merging.", Severity.Warning);
            return;
        }
        
        // Check what groups would be valid without latest chapters
        var groupsWithoutLatest = await ChapterMergeCoordinator.GetValidMergeGroupsAsync(
            selectedChapterList, 
            includeLatestChapters: false);
            
        // Check what groups would be valid with latest chapters
        var groupsWithLatest = await ChapterMergeCoordinator.GetValidMergeGroupsAsync(
            selectedChapterList, 
            includeLatestChapters: true);

        if (!groupsWithLatest.Any())
        {
            Snackbar.Add("No valid consecutive chapter parts selected for merging.", Severity.Warning);
            return;
        }

        bool includeLatest = true;
        
        // If there's a difference, ask the user about latest chapters
        if (groupsWithLatest.Count > groupsWithoutLatest.Count)
        {
            var result = await DialogService.ShowMessageBox(
                "Latest Chapter Detected",
                "The selection includes the latest chapter. Do you want to proceed with merging all valid chapter groups including those with the latest chapters?",
                "Yes", "No");

            if (result != true)
                return;
        }

        await PerformMergeOperation(selectedChapterList, includeLatest);
    }

    private async Task MergeChapterConfirm(Chapter chapter)
    {
        // Get all chapters in the series to properly identify merge groups
        var allChapters = chapterItems.Select(ci => ci.Chapter).ToList();
        var validGroups = await ChapterMergeCoordinator.GetValidMergeGroupsAsync(
            allChapters, 
            includeLatestChapters: true);

        if (!validGroups.Any())
        {
            Snackbar.Add("No consecutive chapter parts found for merging.", Severity.Warning);
            return;
        }

        // Find the group that contains the selected chapter
        var targetGroup = validGroups.FirstOrDefault(g => g.Value.Any(c => c.Id == chapter.Id));
        if (targetGroup.Key == null)
        {
            Snackbar.Add("The selected chapter is not part of any mergeable group.", Severity.Warning);
            return;
        }

        var chaptersToMerge = targetGroup.Value;

        // Check if latest chapter is involved
        var groupsWithoutLatest = await ChapterMergeCoordinator.GetValidMergeGroupsAsync(
            chaptersToMerge, 
            includeLatestChapters: false);

        bool includeLatest = true;
        if (!groupsWithoutLatest.Any())
        {
            var result = await DialogService.ShowMessageBox(
                "Latest Chapter Detected",
                $"The chapter group includes the latest chapter ({targetGroup.Key}). Do you want to proceed with merging?",
                "Yes", "No");

            if (result != true)
                return;
        }

        await PerformMergeOperation(chaptersToMerge, includeLatest);
    }

    private async Task PerformMergeOperation(List<Chapter> chaptersToMerge, bool includeLatestChapters)
    {
        try
        {
            var completedMerges = await ChapterMergeCoordinator.MergeSelectedChaptersAsync(
                chaptersToMerge, 
                includeLatestChapters);

            if (!completedMerges.Any())
            {
                Snackbar.Add("No chapters were merged. Check the logs for more information.", Severity.Warning);
                return;
            }

            int totalProcessedChapters = 0;

            // Update UI: Remove original chapters and add merged chapters
            foreach (var mergeInfo in completedMerges)
            {
                // Find the chapters that were part of this merge based on the merge info
                var originalChapterIds = mergeInfo.OriginalParts.Select(op =>
                        chaptersToMerge.FirstOrDefault(c => c.FileName == op.FileName)?.Id)
                    .Where(id => id.HasValue)
                    .Select(id => id!.Value)
                    .ToHashSet();

                // Remove the original chapters from UI
                var itemsToRemove = chapterItems.Where(ci => originalChapterIds.Contains(ci.Chapter.Id)).ToList();
                foreach (var item in itemsToRemove)
                {
                    chapters.Remove(item);
                    totalProcessedChapters++;
                }

                // Find the merged chapter from the database - it should be one of the original chapters, updated
                var mergedChapterId = chaptersToMerge.FirstOrDefault(c => originalChapterIds.Contains(c.Id))?.Id;
                if (mergedChapterId.HasValue)
                {
                    var mergedChapter = await DbContext.Chapters.FindAsync(mergedChapterId.Value);
                    if (mergedChapter != null)
                    {
                        // Reload the chapter to get updated data
                        await DbContext.Entry(mergedChapter).ReloadAsync();

                        var extractedMetadata = MetadataHandler.GetSeriesAndTitleFromComicInfo(
                            Path.Combine(Manga.Library.NotUpscaledLibraryPath, mergedChapter.RelativePath));

                        chapters.Add(new ChapterItem
                        {
                            Chapter = mergedChapter,
                            ExtractedMetadata = extractedMetadata,
                            NewTitle = extractedMetadata?.ChapterTitle ?? string.Empty,
                            NewFileName = Path.GetFileNameWithoutExtension(mergedChapter.FileName),
                            IsMerged = true
                        });
                    }
                }
            }

            var message = completedMerges.Count == 1
                ? $"Successfully merged {totalProcessedChapters} chapters into 1 group."
                : $"Successfully merged {totalProcessedChapters} chapters into {completedMerges.Count} groups.";

            Snackbar.Add(message, Severity.Success);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to perform manual merge operations");
            Snackbar.Add("Failed to merge chapters. Check the logs for more information.", Severity.Error);
        }
    }

    private record ChapterItem
    {
        public required Chapter Chapter { get; set; }
        public ExtractedMetadata? ExtractedMetadata { get; set; }
        public required string NewTitle { get; set; }
        public required string NewFileName { get; set; }
        public bool IsMerged { get; set; }
    }

}
