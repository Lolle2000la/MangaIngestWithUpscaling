@page "/libraries"
@using MangaIngestWithUpscaling.Data.LibraryManagement
@using MangaIngestWithUpscaling.Services.BackqroundTaskQueue
@using MangaIngestWithUpscaling.Services.BackqroundTaskQueue.Tasks
@using Microsoft.EntityFrameworkCore


@inject ApplicationDbContext DbContext
@inject IDialogService DialogService
@inject TaskQueue TaskQueue

<MudText Typo="Typo.h3">Libraries</MudText>

<MudPaper Elevation="3" Class="mb-3">
    <MudStack Row>
        <a href="libraries/create">
            <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary">Create</MudButton>
        </a>
    </MudStack>
</MudPaper>

<MudTable T="Library" Items="@LoadedLibraries">
    <HeaderContent>
        <MudTh>Library Name</MudTh>
        <MudTh>Ingest Path</MudTh>
        <MudTh>Upscaler Config</MudTh>
        <MudTh>Mangas</MudTh>
        <MudTh>Chapters</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Name</MudTd>
        <MudTd>@context.IngestPath</MudTd>
        <MudTd>@context.UpscalerConfig?.Name</MudTd>
        <MudTd>@context.MangaSeries?.Count()</MudTd>
        <MudTd>@context.MangaSeries?.SelectMany(m => m.Chapters)?.Count()</MudTd>
        <MudTd>
            <a href="libraries/edit/@context.Id">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Primary"
                               title="Edit this library" />
            </a>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Secondary"
                           title="Delete this library"
                           OnClick="e => OnDeleteLibraryEntry(context)" />
            <MudIconButton Icon="@Icons.Material.Filled.Search" Variant="Variant.Filled" Color="Color.Tertiary"
                           title="Schedule a scan of this library"
                           OnClick="e => OnScanLibrary(context)" />
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    private IReadOnlyCollection<Library> LoadedLibraries { get; set; }

    protected override async Task OnInitializedAsync()
    {
        LoadedLibraries = await DbContext.Libraries
            .Include(x => x.MangaSeries)
            .ThenInclude(x => x.Chapters)
            .ToListAsync();
    }

    private async Task OnLibraryChanged()
    {
        LoadedLibraries = await DbContext.Libraries.ToListAsync();
    }

    protected async Task OnScanLibrary(Library library)
    {
        await TaskQueue.EnqueueAsync(new ScanIngestTask
            {
                LibraryId = library.Id,
                LibraryName = library.Name
            });
    }

    protected async Task OnDeleteLibraryEntry(Library library)
    {
        var result = await DialogService.ShowMessageBox(
            "Delete Library",
            "Do you really want to delete this library? Note: This does NOT delete any of the files created.",
            "OK", cancelText: "Cancel",
            options: new DialogOptions
                {
                    CloseButton = true,
                    BackdropClick = true,
                    CloseOnEscapeKey = true
                });

        if (result.HasValue && result.Value)
        {
            DbContext.Libraries.Remove(library);
            await DbContext.SaveChangesAsync();
        }

        await OnLibraryChanged();
    }
}
