@page "/libraries"
@using MangaIngestWithUpscaling.Data.LibraryManagement
@using MangaIngestWithUpscaling.Services.BackgroundTaskQueue
@using MangaIngestWithUpscaling.Services.BackgroundTaskQueue.Tasks


@inject ApplicationDbContext DbContext
@inject IDialogService DialogService
@inject TaskQueue TaskQueue

<PageTitle>Manage Libraries</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <div class="d-flex align-center justify-space-between mb-6">
            <div class="d-flex align-center">
                <MudIcon Icon="@Icons.Material.Filled.LibraryBooks" Color="Color.Primary" Size="Size.Large" Class="mr-3" />
                <MudText Typo="Typo.h3" Color="Color.Primary">Libraries</MudText>
            </div>
            <MudStack Row Spacing="2">
                <MudButton Href="libraries/create"
                           StartIcon="@Icons.Material.Filled.Add" 
                           Variant="Variant.Filled" 
                           Color="Color.Primary"
                           Size="Size.Large">
                    Create Library
                </MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.ImageAspectRatio" 
                           Variant="Variant.Outlined" 
                           Color="Color.Secondary"
                           Size="Size.Large"
                           OnClick="OnUpscaleAll">
                    Upscale All
                </MudButton>
            </MudStack>
        </div>
    </MudItem>

    <MudItem xs="12">
        @if (!LoadedLibraries.Any())
        {
            <MudPaper Elevation="0" Class="pa-8 text-center" Style="border: 2px dashed var(--mud-palette-lines-inputs);">
                <MudIcon Icon="@Icons.Material.Filled.LibraryBooks" Size="Size.Large" Color="Color.Surface" Class="mb-4" />
                <MudText Typo="Typo.h5" Color="Color.Surface" Class="mb-2">No Libraries Yet</MudText>
                <MudText Typo="Typo.body1" Color="Color.Surface" Class="mb-4">
                    Create your first library to start managing your manga collection.
                </MudText>
                <MudButton Href="libraries/create"
                           StartIcon="@Icons.Material.Filled.Add" 
                           Variant="Variant.Filled" 
                           Color="Color.Primary"
                           Size="Size.Large">
                    Create Your First Library
                </MudButton>
            </MudPaper>
        }
        else
        {
            <MudPaper Elevation="2">
                <MudTable T="Library" Items="@LoadedLibraries" Hover="true" Striped="true" FixedHeader="true">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6" Class="mr-4">Library Overview</MudText>
                        <MudSpacer />
                        <MudText Typo="Typo.body2" Color="Color.Surface">
                            @LoadedLibraries.Count() Libraries • 
                            @LoadedLibraries.SelectMany(l => l.MangaSeries ?? new List<Manga>()).Count() Manga Series • 
                            @LoadedLibraries.SelectMany(l => l.MangaSeries ?? new List<Manga>()).SelectMany(m => m.Chapters).Count() Chapters
                        </MudText>
                    </ToolBarContent>
                    
                    <HeaderContent>
                        <MudTh><MudText Typo="Typo.subtitle2">Library Name</MudText></MudTh>
                        <MudTh><MudText Typo="Typo.subtitle2">Ingest Path</MudText></MudTh>
                        <MudTh><MudText Typo="Typo.subtitle2">Upscaler Config</MudText></MudTh>
                        <MudTh Style="text-align: center;"><MudText Typo="Typo.subtitle2">Manga Series</MudText></MudTh>
                        <MudTh Style="text-align: center;"><MudText Typo="Typo.subtitle2">Chapters</MudText></MudTh>
                        <MudTh Style="text-align: center;"><MudText Typo="Typo.subtitle2">Actions</MudText></MudTh>
                    </HeaderContent>
                    
                    <RowTemplate>
                        <MudTd DataLabel="Library Name">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Folder" Color="Color.Primary" Class="mr-3" />
                                <div>
                                    <MudText Typo="Typo.body1" Class="font-weight-medium">@context.Name</MudText>
                                    @if (context.UpscaleOnIngest)
                                    {
                                        <MudChip T="string" Size="Size.Small" Color="Color.Success" Variant="Variant.Text">Auto-Upscale</MudChip>
                                    }
                                </div>
                            </div>
                        </MudTd>
                        
                        <MudTd DataLabel="Ingest Path">
                            <MudTooltip Text="@context.IngestPath">
                                <MudText Typo="Typo.body2" Class="text-truncate" Style="max-width: 200px;">
                                    @context.IngestPath
                                </MudText>
                            </MudTooltip>
                        </MudTd>
                        
                        <MudTd DataLabel="Upscaler Config">
                            @if (context.UpscalerProfile != null)
                            {
                                <MudChip T="string" Icon="@Icons.Material.Filled.ImageAspectRatio" 
                                         Color="Color.Info" 
                                         Size="Size.Small">
                                    @context.UpscalerProfile.Name
                                </MudChip>
                            }
                            else
                            {
                                <MudText Typo="Typo.body2" Color="Color.Surface">Not configured</MudText>
                            }
                        </MudTd>
                        
                        <MudTd DataLabel="Mangas" Style="text-align: center;">
                            <MudText Typo="Typo.body1" Class="font-weight-medium">
                                @(context.MangaSeries?.Count() ?? 0)
                            </MudText>
                        </MudTd>
                        
                        <MudTd DataLabel="Chapters" Style="text-align: center;">
                            <MudText Typo="Typo.body1" Class="font-weight-medium">
                                @(context.MangaSeries?.SelectMany(m => m.Chapters)?.Count() ?? 0)
                            </MudText>
                        </MudTd>
                        
                        <MudTd DataLabel="Actions" Style="text-align: center;">
                            <MudButtonGroup Variant="Variant.Text" Size="Size.Small">
                                <MudTooltip Text="Edit this library">
                                    <MudIconButton Href="@($"libraries/edit/{context.Id}")"
                                                   Icon="@Icons.Material.Filled.Edit" 
                                                   Color="Color.Primary"
                                                   Size="Size.Small" />
                                </MudTooltip>
                                
                                <MudTooltip Text="Scan library for new content">
                                    <MudIconButton Icon="@Icons.Material.Filled.Search" 
                                                   Color="Color.Info"
                                                   Size="Size.Small"
                                                   OnClick="@(e => OnScanLibrary(context))" />
                                </MudTooltip>
                                
                                @if (context.UpscalerProfileId is not null && !string.IsNullOrEmpty(context.UpscaledLibraryPath))
                                {
                                    <MudTooltip Text="Upscale unprocessed content">
                                        <MudIconButton Icon="@Icons.Material.Filled.ImageAspectRatio" 
                                                       Color="Color.Secondary"
                                                       Size="Size.Small"
                                                       OnClick="@(e => OnUpscaleLibrary(context))" />
                                    </MudTooltip>
                                }
                                
                                <MudTooltip Text="Check library integrity">
                                    <MudIconButton Icon="@Icons.Material.Filled.Checklist" 
                                                   Color="Color.Warning"
                                                   Size="Size.Small"
                                                   OnClick="@(e => OnCheckIntegrity(context))" />
                                </MudTooltip>
                                
                                <MudTooltip Text="Manage image filters">
                                    <MudIconButton Href="@($"libraries/{context.Id}/filtered-images")"
                                                   Icon="@Icons.Material.Filled.FilterAlt" 
                                                   Color="Color.Default"
                                                   Size="Size.Small" />
                                </MudTooltip>
                                
                                <MudTooltip Text="Delete this library">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                   Color="Color.Error"
                                                   Size="Size.Small"
                                                   OnClick="@(e => OnDeleteLibraryEntry(context))" />
                                </MudTooltip>
                            </MudButtonGroup>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        }
    </MudItem>
</MudGrid>

@code {
    private IReadOnlyCollection<Library> LoadedLibraries { get; set; } = new List<Library>();

    protected override async Task OnInitializedAsync()
    {
        LoadedLibraries = await DbContext.Libraries
        .Include(x => x.UpscalerProfile)
        .Include(x => x.MangaSeries)
        .ThenInclude(x => x.UpscalerProfilePreference)
        .Include(x => x.MangaSeries)
        .ThenInclude(x => x.Chapters)
        .ToListAsync();
    }

    private async Task OnLibraryChanged()
    {
        LoadedLibraries = await DbContext.Libraries.ToListAsync();
    }

    protected async Task OnScanLibrary(Library library)
    {
        await TaskQueue.EnqueueAsync(new ScanIngestTask
        {
            LibraryId = library.Id,
            LibraryName = library.Name
        });
    }

    protected async Task OnDeleteLibraryEntry(Library library)
    {
        var result = await DialogService.ShowMessageBox(
        "Delete Library",
        "Do you really want to delete this library? Note: This does NOT delete any of the files created.",
        "OK", cancelText: "Cancel",
        options: new DialogOptions
        {
            CloseButton = true,
            BackdropClick = true,
            CloseOnEscapeKey = true
        });

        if (result.HasValue && result.Value)
        {
            DbContext.Libraries.Remove(library);
            await DbContext.SaveChangesAsync();
        }

        await OnLibraryChanged();
    }

    protected async Task OnUpscaleLibrary(Library library)
    {
        if (library.UpscalerProfileId is null || library.UpscalerProfile == null ||
        string.IsNullOrEmpty(library.UpscaledLibraryPath))
        {
            return;
        }

        foreach (var manga in library.MangaSeries)
        {
            foreach (var chapter in manga.Chapters)
            {
                if (chapter.IsUpscaled)
                {
                    continue;
                }

                await TaskQueue.EnqueueAsync(new UpscaleTask(chapter));
            }
        }
    }

    protected async Task OnUpscaleAll()
    {
        foreach (var library in LoadedLibraries)
        {
            await OnUpscaleLibrary(library);
        }
    }

    protected async Task OnCheckIntegrity(Library library)
    {
        await TaskQueue.EnqueueAsync(new LibraryIntegrityCheckTask(library));
    }
}