@page "/libraries/edit/{LibraryId:int}"
@using MangaIngestWithUpscaling.Data.LibraryManagement

@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager

<PageTitle>Edit Library "@(Library?.Name ?? "Unknown")"</PageTitle>

<MudCard>
    <MudCardHeader>
        <MudStack Row="true" AlignItems="AlignItems.Center">
            <a href="libraries"><MudIconButton Icon="@Icons.Material.Filled.ArrowBack" /></a>
            <MudText Typo="Typo.h5">Edit Library: @(Library?.Name ?? "Unknown")</MudText>
        </MudStack>
    </MudCardHeader>
    <MudCardContent>
        <EditLibraryForm @bind-Library="Library"
                         @bind-IsValid="IsValid" />
    </MudCardContent>
    <MudCardActions>
        <MudSpacer />
        <MudButton StartIcon="@Icons.Material.Filled.Save"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   Disabled="!IsValid"
                   OnClick="OnSaveLibrary">Save</MudButton>
    </MudCardActions>
</MudCard>


@code {
    [Parameter]
    public int? LibraryId { get; set; }

    public Library? Library { get; set; } = new Library
    {
            Name = "",
            UpscalerProfileId = null,
        };

    public bool IsValid { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        if (LibraryId.HasValue)
        {
            Library = await DbContext.Libraries
                .Include(l => l.MangaSeries)
                .Include(l => l.FilterRules)
                .Include(l => l.RenameRules)
                .FirstOrDefaultAsync(l => l.Id == LibraryId);
            if (Library == null)
            {
                NavigationManager.NavigateTo("/libraries");
            }
        }
        else
        {
            NavigationManager.NavigateTo("/libraries");
        }
    }

    private async Task OnSaveLibrary()
    {
        if (Library == null) return;

        await DbContext.SaveChangesAsync();
        NavigationManager.NavigateTo("/libraries");
    }
}
