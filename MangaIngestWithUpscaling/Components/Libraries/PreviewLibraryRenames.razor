@using MangaIngestWithUpscaling.Data.LibraryManagement
@using MangaIngestWithUpscaling.Services.ChapterRecognition
@using MangaIngestWithUpscaling.Services.LibraryFiltering
@using MangaIngestWithUpscaling.Services.MetadataHandling
@using Microsoft.AspNetCore.Components
@inject ILibraryRenamingService RenamingService
@inject IChapterInIngestRecognitionService ChapterRecognition
@inject IMetadataHandlingService MetadataHandlingService

<MudStack Spacing="2">
    <MudText Typo="Typo.h5">Preview Rename Effects</MudText>
    <MudExpansionPanels>
        <MudExpansionPanel Text="Existing Series Preview">
            <MudTable T="SeriesPreview" Items="@SeriesPreviews" Dense>
                <HeaderContent>
                    <MudTh>Original Series</MudTh>
                    <MudTh>Renamed Series</MudTh>
                </HeaderContent>
                <RowTemplate Context="sp">
                    <MudTd DataLabel="Original Series">@sp.Orig</MudTd>
                    <MudTd DataLabel="Renamed Series">@sp.NewNameHtml</MudTd>
                </RowTemplate>
            </MudTable>
        </MudExpansionPanel>
        <MudExpansionPanel Text="Existing Chapter File Path Preview">
            <MudTable T="ChapterFilePathPreview" Items="@ExistingChapterFilePreviews" Dense>
                <HeaderContent>
                    <MudTh>Series</MudTh>
                    <MudTh>Original File Path</MudTh>
                    <MudTh>New File Path</MudTh>
                </HeaderContent>
                <RowTemplate Context="cfp">
                    <MudTd DataLabel="Series">@cfp.SeriesTitle</MudTd>
                    <MudTd DataLabel="Original File Path">@cfp.OriginalFilePath</MudTd>
                    <MudTd DataLabel="New File Path">@cfp.NewFilePathHtml</MudTd>
                </RowTemplate>
            </MudTable>
        </MudExpansionPanel>
        <MudExpansionPanel Text="Existing Chapter Title Preview">
            <MudTable T="ChapterTitlePreview" Items="@ExistingChapterTitlePreviews" Dense>
                <HeaderContent>
                    <MudTh>Series</MudTh>
                    <MudTh>Original Chapter Title</MudTh>
                    <MudTh>New Chapter Title</MudTh>
                </HeaderContent>
                <RowTemplate Context="ctp">
                    <MudTd DataLabel="Series">@ctp.SeriesTitle</MudTd>
                    <MudTd DataLabel="Original Chapter Title">@ctp.OriginalChapterTitle</MudTd>
                    <MudTd DataLabel="New Chapter Title">@ctp.NewChapterTitleHtml</MudTd>
                </RowTemplate>
            </MudTable>
        </MudExpansionPanel>
        <MudExpansionPanel Text="Ingest - Series Title Preview">
            <MudTable T="IngestSeriesTitlePreview" Items="@IngestSeriesTitlePreviews" Dense>
                <HeaderContent>
                    <MudTh>Original Ingest Path</MudTh>
                    <MudTh>Original Series Title</MudTh>
                    <MudTh>New Series Title</MudTh>
                </HeaderContent>
                <RowTemplate Context="istp">
                    <MudTd DataLabel="Original Ingest Path">@istp.OriginalIngestPath</MudTd>
                    <MudTd DataLabel="Original Series Title">@istp.OriginalSeriesTitle</MudTd>
                    <MudTd DataLabel="New Series Title">@istp.NewSeriesTitleHtml</MudTd>
                </RowTemplate>
            </MudTable>
        </MudExpansionPanel>
        <MudExpansionPanel Text="Ingest - Chapter Title Preview">
            <MudTable T="IngestChapterTitlePreview" Items="@IngestChapterTitlePreviews" Dense>
                <HeaderContent>
                    <MudTh>Original Ingest Path</MudTh>
                    <MudTh>Original Chapter Title</MudTh>
                    <MudTh>New Chapter Title</MudTh>
                </HeaderContent>
                <RowTemplate Context="ictp">
                    <MudTd DataLabel="Original Ingest Path">@ictp.OriginalIngestPath</MudTd>
                    <MudTd DataLabel="Original Chapter Title">@ictp.OriginalChapterTitle</MudTd>
                    <MudTd DataLabel="New Chapter Title">@ictp.NewChapterTitleHtml</MudTd>
                </RowTemplate>
            </MudTable>
        </MudExpansionPanel>
        <MudExpansionPanel Text="Ingest - File Name Preview">
            <MudTable T="IngestFileNamePreview" Items="@IngestFileNamePreviews" Dense>
                <HeaderContent>
                    <MudTh>Original Ingest Path</MudTh>
                    <MudTh>Original File Name</MudTh>
                    <MudTh>New File Name</MudTh>
                </HeaderContent>
                <RowTemplate Context="ifnp">
                    <MudTd DataLabel="Original Ingest Path">@ifnp.OriginalIngestPath</MudTd>
                    <MudTd DataLabel="Original File Name">@ifnp.OriginalFileName</MudTd>
                    <MudTd DataLabel="New File Name">@ifnp.NewFileNameHtml</MudTd>
                </RowTemplate>
            </MudTable>
        </MudExpansionPanel>
    </MudExpansionPanels>
</MudStack>

@code {
    [Parameter, EditorRequired] public required Library Library { get; set; }

    private List<SeriesPreview> SeriesPreviews = new();
    private List<ChapterFilePathPreview> ExistingChapterFilePreviews = new();
    private List<ChapterTitlePreview> ExistingChapterTitlePreviews = new();
    private List<IngestSeriesTitlePreview> IngestSeriesTitlePreviews = new();
    private List<IngestChapterTitlePreview> IngestChapterTitlePreviews = new();
    private List<IngestFileNamePreview> IngestFileNamePreviews = new();

    private class SeriesPreview
    {
        public string Orig { get; set; } = string.Empty;
        public MarkupString NewNameHtml { get; set; }
    }

    private class ChapterFilePathPreview
    {
        public string SeriesTitle { get; set; } = string.Empty;
        public string OriginalFilePath { get; set; } = string.Empty;
        public MarkupString NewFilePathHtml { get; set; }
    }

    private class ChapterTitlePreview
    {
        public string SeriesTitle { get; set; } = string.Empty;
        public string OriginalChapterTitle { get; set; } = string.Empty;
        public MarkupString NewChapterTitleHtml { get; set; }
    }

    private class IngestSeriesTitlePreview
    {
        public string OriginalIngestPath { get; set; }
        public string OriginalSeriesTitle { get; set; }
        public MarkupString NewSeriesTitleHtml { get; set; }
    }

    private class IngestChapterTitlePreview
    {
        public string OriginalIngestPath { get; set; }
        public string OriginalChapterTitle { get; set; }
        public MarkupString NewChapterTitleHtml { get; set; }
    }

    private class IngestFileNamePreview
    {
        public string OriginalIngestPath { get; set; }
        public string OriginalFileName { get; set; }
        public MarkupString NewFileNameHtml { get; set; }
    }

    protected override void OnParametersSet()
    {
        GeneratePreviews();
    }

    public Task RefreshPreviewsAsync()
    {
        GeneratePreviews();
        return InvokeAsync(StateHasChanged);
    }

    private void GeneratePreviews()
    {
        SeriesPreviews.Clear();
        ExistingChapterFilePreviews.Clear();
        ExistingChapterTitlePreviews.Clear();
        if (Library.MangaSeries != null && Library.RenameRules != null)
        {
            foreach (var m in Library.MangaSeries)
            {
                var dummySeriesChapter = new FoundChapter(
                    FileName: string.Empty,
                    RelativePath: string.Empty,
                    StorageType: ChapterStorageType.Cbz,
                    Metadata: new ExtractedMetadata(m.PrimaryTitle, null, null)
                );
                var renamedSeries = RenamingService.ApplyRenameRules(dummySeriesChapter, Library.RenameRules);
                if (renamedSeries.Metadata.Series != m.PrimaryTitle)
                {
                    var orig = m.PrimaryTitle;
                    var result = renamedSeries.Metadata.Series;
                    var diff = ComputeDiffHtml(orig, result);
                    SeriesPreviews.Add(new SeriesPreview { Orig = orig, NewNameHtml = diff });
                }
            }
            
            foreach (var series in Library.MangaSeries)
            {
                if (series.Chapters == null) continue;
                foreach (var chapter in series.Chapters)
                {
                    var chapterMetadata = MetadataHandlingService.GetSeriesAndTitleFromComicInfo(chapter.NotUpscaledFullPath);

                    var originalFoundChapter = new FoundChapter(
                        FileName: chapter.FileName,
                        RelativePath: chapter.RelativePath,
                        StorageType: ChapterStorageType.Cbz,
                        Metadata: chapterMetadata
                    );

                    var finalRenamedChapter = RenamingService.ApplyRenameRules(originalFoundChapter, Library.RenameRules);

                    // Check for File Name changes
                    if (finalRenamedChapter.FileName != chapter.FileName)
                    {
                        var diff = ComputeDiffHtml(chapter.FileName, finalRenamedChapter.FileName);
                        ExistingChapterFilePreviews.Add(new ChapterFilePathPreview
                        {
                            SeriesTitle = series.PrimaryTitle,
                            OriginalFilePath = chapter.FileName,
                            NewFilePathHtml = diff
                        });
                    }

                    // Check for Chapter Title changes
                    var originalChapterTitleProxy = originalFoundChapter.Metadata.ChapterTitle;
                    var finalChapterTitle = finalRenamedChapter.Metadata.ChapterTitle ?? finalRenamedChapter.FileName;

                    if (finalChapterTitle != originalChapterTitleProxy)
                    {
                        var diff = ComputeDiffHtml(originalChapterTitleProxy, finalChapterTitle);
                        ExistingChapterTitlePreviews.Add(new ChapterTitlePreview
                        {
                            SeriesTitle = series.PrimaryTitle,
                            OriginalChapterTitle = originalChapterTitleProxy,
                            NewChapterTitleHtml = diff
                        });
                    }
                }
            }
        }

        IngestSeriesTitlePreviews.Clear();
        IngestChapterTitlePreviews.Clear();
        IngestFileNamePreviews.Clear();
        if (Library.IngestPath != null && Library.FilterRules != null && Library.RenameRules != null)
        {
            var foundInIngest = ChapterRecognition.FindAllChaptersAt(Library.IngestPath, Library.FilterRules);
            foreach (var originalChapter in foundInIngest)
            {
                var finalRenamedChapter = RenamingService.ApplyRenameRules(originalChapter, Library.RenameRules);

                // Series Title Preview for Ingest
                if (originalChapter.Metadata.Series != finalRenamedChapter.Metadata.Series)
                {
                    IngestSeriesTitlePreviews.Add(new IngestSeriesTitlePreview
                    {
                        OriginalIngestPath = originalChapter.RelativePath,
                        OriginalSeriesTitle = originalChapter.Metadata.Series,
                        NewSeriesTitleHtml = ComputeDiffHtml(originalChapter.Metadata.Series, finalRenamedChapter.Metadata.Series)
                    });
                }

                // Chapter Title Preview for Ingest
                var originalIngestChapterTitle = originalChapter.Metadata.ChapterTitle ?? originalChapter.FileName;
                var finalIngestChapterTitle = finalRenamedChapter.Metadata.ChapterTitle ?? finalRenamedChapter.FileName;
                if (originalIngestChapterTitle != finalIngestChapterTitle)
                {
                    IngestChapterTitlePreviews.Add(new IngestChapterTitlePreview
                    {
                        OriginalIngestPath = originalChapter.RelativePath,
                        OriginalChapterTitle = originalIngestChapterTitle,
                        NewChapterTitleHtml = ComputeDiffHtml(originalIngestChapterTitle, finalIngestChapterTitle)
                    });
                }

                // File Name Preview for Ingest
                if (originalChapter.FileName != finalRenamedChapter.FileName)
                {
                    IngestFileNamePreviews.Add(new IngestFileNamePreview
                    {
                        OriginalIngestPath = originalChapter.RelativePath,
                        OriginalFileName = originalChapter.FileName,
                        NewFileNameHtml = ComputeDiffHtml(originalChapter.FileName, finalRenamedChapter.FileName)
                    });
                }
            }
        }
    }

    private MarkupString ComputeDiffHtml(string orig, string result)
    {
        int min = Math.Min(orig.Length, result.Length);
        int start = 0;
        while (start < min && orig[start] == result[start]) start++;
        int end = 0;
        while (end < min - start && orig[orig.Length - 1 - end] == result[result.Length - 1 - end]) end++;
        var prefix = result.Substring(0, start);
        var suffix = end > 0 ? result.Substring(result.Length - end, end) : string.Empty;
        var changed = result.Substring(start, result.Length - start - end);
        var html = $"{prefix}<mark>{changed}</mark>{suffix}";
        return (MarkupString)html;
    }

}
